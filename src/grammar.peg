{
  var p, parser, vfls, virtuals, ccss, asts, blankCount; 

  p = parser = this;
  
  blankCount = 0;
  
  p.getBlankName = function () {
    blankCount++;
    return "blank-" + blankCount;
  };
  
  p.size = ['width','height'];
  p.pos = ['x','y'];

  p.getResults = function () {
    var _ccss = virtuals.sort().join(" ");
    if (_ccss.length == 0) {
      _ccss = ccss;
    }
    else {
      _ccss = ["@virtual "+_ccss].concat(ccss);
    }
    return {
        //asts: asts, // DEBUG
        ccss: _ccss,
        vfl: vfls
      }
  }

  asts = [];
  
  p.addAST = function (stuff) {
    asts.push(stuff);
  }

  ccss = [];
  
  p.addCCSS = function (statement) {
    ccss.push(statement)
  }

  virtuals = [];
  
  p.addVirtual = function (virtual) {
    if (virtuals.indexOf(virtual) === -1) {
      virtuals.push('"'+virtual+'"');
    }
  }

  vfls = [];

  p.addVFL = function (vfl) {
    vfls.push(vfl);
  }


  p.addTemplate = function (lines,name,options) {
    var ast, prefix, container;
    
    prefix = name+'-';
    ast = p.processHLines(lines);
    ast.name = name;
    
    if (options.in) {
      container = options.in;
    }
    else {
      container = "::";
    }

    var md, mdOp, outergap, gaps, g, hasGap;
    
    gaps = {};
    hasGap = false;
    
    g = options.gap;
    if (g) { 
      hasGap = true;
      gaps.top = g;
      gaps.right = g;
      gaps.bottom = g;
      gaps.left = g;
      gaps.h = g;
      gaps.v = g;
    }    
    g = options['h-gap'];
    if (g) { 
      hasGap = true;
      gaps.right = g;
      gaps.left = g;
      gaps.h = g;
    }
    g = options['v-gap'];
    if (g) { 
      hasGap = true;
      gaps.top = g;
      gaps.bottom = g;
      gaps.v = g;
    }
    g = options['outer-gap'];
    if (g) { 
      hasGap = true;
      gaps.top = g;
      gaps.right = g;
      gaps.bottom = g;
      gaps.left = g;
    }
    g = options['top-gap'];
    if (g) { 
      hasGap = true;
      gaps.top = g;
    }
    g = options['right-gap']; 
    if (g) { 
      hasGap = true;
      gaps.right = g;
    }
    g = options['bottom-gap']; 
    if (g) { 
      hasGap = true;
      gaps.bottom = g;
    }
    g = options['left-gap']; 
    if (g) { 
      hasGap = true;
      gaps.left = g;
    }
    
    
    if (hasGap) {
      mdOp = "<=";
    } else {
      mdOp = "==";
    }
    
    
    // md-width     
    // -------------------------------------------------
    // == (this[width] - gap.left - gap.right - gap * (span - 1)) / span
    
    md = '::['+name+'-md-width] ' + mdOp + ' ';
    if (gaps.right || gaps.left || gaps.h) {
      md += '(' + container + '[width]';
      if (gaps.right) {md += ' - ' + gaps.right;}
      if (gaps.left ) {md += ' - ' + gaps.left;}      
      if (gaps.h && ast.yspan > 1){
        md += ' - ' + gaps.h;
        if (ast.yspan > 2) {md += ' * ' + (ast.yspan - 1);}
      }
      md += ')';
    } else {
      md += container + '[width]';
    }
    if (ast.yspan > 1){md += ' / ' + ast.yspan;}
    md += " !require";
    p.addCCSS(md);
    
    
    // md-height
    // -------------------------------------------------
  
    md = '::['+name+'-md-height] ' + mdOp + ' ';
    if (gaps.top || gaps.bottom || gaps.v) {
      md += '(' + container + '[height]';
      if (gaps.top) {md += ' - ' + gaps.top;}
      if (gaps.bottom ) {md += ' - ' + gaps.bottom;}
      if (gaps.v && ast.xspan > 1){
        md += ' - ' + gaps.v;
        if (ast.xspan > 2) {md += ' * ' + (ast.xspan - 1);}
      }
      md += ')';
    } else {
      md += container + '[height]';
    }    
    if (ast.xspan > 1){md += ' / ' + ast.xspan;}
    md += " !require";
    p.addCCSS(md);
    
    
    // virtual widths
    // -------------------------------------------------
    // == md-width * span - gap * (span - 1)
    
    var xspan, wccss;
    for (var el in ast.widths) {
      p.addVirtual(prefix+el);
      xspan = ast.widths[el];
      wccss = '"'+prefix+el+'"[width] == ';
      wccss +='::['+ast.name+'-md-width]';
      if (xspan > 1) {
        wccss += ' * ' + xspan;
        if (gaps.h) {
          wccss += ' + ' + gaps.h;
          if (xspan > 2) {
            wccss += ' * ' + (xspan - 1);
          }
        }
      }
      p.addCCSS(wccss)
    }
    
    
    // virtual heights
    // -------------------------------------------------
    
    var yspan, hccss;
    for (var el in ast.heights) {
      yspan = ast.heights[el];
      hccss = '"'+prefix+el+'"[height] == ';
      hccss +='::['+ast.name+'-md-height]';
      if (yspan > 1) {
        hccss += ' * ' + yspan;
        if (gaps.v) {
          hccss += ' + ' + gaps.v;
          if (yspan > 2) {
            hccss += ' * ' + (yspan - 1);
          }
        }
      }
      p.addCCSS(hccss);
    }

    var vfl, vflFooter;
    ast.v.forEach(function(brij){
      brij = brij.split("%-v-%");
      vfl = '@v ["'+prefix+brij[0]+'"]';
      if (gaps.v) {vfl += '-';}
      vfl += '["'+prefix+brij[1]+'"]';
      if (gaps.v) {vfl += ' gap('+gaps.v+')';}
      p.addVFL(vfl);
    });
   
    ast.h.forEach(function(brij){
      brij = brij.split("%-h-%");
      vfl = '@h ["'+prefix+brij[0]+'"]';
      if (gaps.h) {vfl += '-';}
      vfl += '["'+prefix+brij[1]+'"]';
      if (gaps.h) {vfl += ' gap('+gaps.h+')';}
      p.addVFL(vfl);
    });
    
    var edgeEls;
    
    edgeEls = [];
    ast.cols[0].y.forEach(function(el){
      if (edgeEls.indexOf(el) > -1) {return null;}
      edgeEls.push(el);
      vfl = '@h |';
      if (gaps.left) {vfl += '-';}
      vfl += '["'+prefix+el+'"]'+' in('+container+')';   
      if (gaps.left) {vfl += ' gap('+gaps.left+')';}
      p.addVFL(vfl);
    });

    edgeEls = [];
    ast.rows[0].x.forEach(function(el){
      if (edgeEls.indexOf(el) > -1) {return null;}
      edgeEls.push(el);
      vfl = '@v |';
      if (gaps.top) {vfl += '-';}
      vfl += '["'+prefix+el+'"]'+' in('+container+')';
      if (gaps.top) {vfl += ' gap('+gaps.top+')';}
      p.addVFL(vfl);
    });

    edgeEls = [];
    ast.cols[ast.cols.length-1].y.forEach(function(el){
      if (edgeEls.indexOf(el) > -1) {return null;}
      edgeEls.push(el);
      vfl = '@h ["'+prefix+el+'"]';
      if (gaps.right) {vfl += '-';}
      vfl +='|'+' in('+container+')';
      if (gaps.right) {vfl += ' gap('+gaps.right+')';}
      p.addVFL(vfl);
    });

    edgeEls = [];
    ast.rows[ast.rows.length-1].x.forEach(function(el){
      if (edgeEls.indexOf(el) > -1) {return null;}
      edgeEls.push(el);
      vfl = '@v ["'+prefix+el+'"]';
      if (gaps.bottom) {vfl += '-';}
      vfl += '|'+' in('+container+')';
      if (gaps.bottom) {vfl += ' gap('+gaps.bottom+')';}
      p.addVFL(vfl);
    });

    

    //p.addVFL(ast);
    p.addAST(ast);
    
    return ast;
  }

  p.processHZones = function (zones) {
    var xspan, curr, prev, h, x, widths,
      dotCounter, isDot;
    xspan = 0;
    h = [];
    widths = {};
    x = [];
    dotCounter = 0;    
    zones.forEach(function(zone){
      isDot = false;
      curr = zone.name;
      
      // "." are each treated as an empty zone
      if (curr === "-DOT-") {
        isDot = false;
        dotCounter++;
        curr += dotCounter;
      }
      x = x.concat(zone.x);
      delete zone.x;
      if (prev && prev !== curr) {   
        h.push([prev,curr].join("%-h-%"));
      }
      widths[zone.name] = zone.xspan;
      xspan += zone.xspan;
      prev = curr;
    });
    return {xspan:xspan,x:x,h:h,widths:widths};
  }
  
  p.processHLines = function (lines) {
    var cols,i,j,col,results;
    results = {heights:{},widths:{},v:[],h:[]};
    cols = [];
    i = 0;


    lines.forEach(function(row){
      j = 0;
      for (var nam in row.widths) {        
        results.widths[nam] = row.widths[nam];
      }
      row.h.forEach(function(hh){
        if (results.h.indexOf(hh) === -1) {results.h.push(hh);}
      })
      row.x.forEach(function(xx){
        var col;
        if (!cols[j]) {cols[j] = {y:[]};}
        col = cols[j];
        col.y.push(xx);
        j++;
      })
      i++;
    });    

    cols.forEach(function(col){
      var curr, currspan, prev, vStr, heights, i, v;
      v = [];            
      currspan = 0;
      prev = null;
      i = 0;
      col.y.forEach(function(name){        
        curr = name;
        currspan++;
        if (col.y[i+1]!==curr) {
          results.heights[name] = currspan;
          currspan = 0;
        }
        if (prev && prev !== curr) {
          vStr = [prev,curr].join("%-v-%")
          if (results.v.indexOf(vStr) === -1) {results.v.push(vStr);}
        }
        prev = curr;
        i++;
      })
    })

    results.yspan = cols.length;
    results.xspan = lines.length;
    results.cols = cols;
    results.rows = lines;           

    return results;
  }  


  p.trim = function (x) {
    if (typeof x === "string") {return x.trim();}
    if (x instanceof Array) {return x.join("").trim();}
    return ""
  };

  p.flatten = function (array, isShallow) {
    var index = -1,
      length = array ? array.length : 0,
      result = [];

    while (++index < length) {
      var value = array[index];

      if (value instanceof Array) {
        Array.prototype.push.apply(result, isShallow ? value : p.flatten(value));
      }
      else {
        result.push(value);
      }
    }
    return result;
  }

  p.stringify = function (array) {
    return p.trim(p.flatten(array));
  };
  
}

start
  = __ Statement* __ {return p.getResults()}

Statement
  = "@" vfls:VGLStatement EOS __ { return vfls; }

VGLStatement
  = RowsCols
  / Template

RowsCols "grid-rows / grid-cols"
  = ("grid-"/"-gss-grid-") d:RowColDimension __ '"' line:Line '"' __ stuff:AnyChar* 
  {
    var vfl, props;
    vfl = "@"+ ['v','h'][d] +" "+ 
      line +" "+
      "in"+"(::)" +" "+ 
      "chain-"+p.size[d]+"(::["+p.size[d] +"]) "+       
      "chain-"+p.size[1-d] +" "+
      "chain-"+p.pos[d]+"(::["+p.pos[d] +"]) "+
      p.trim(stuff);
    p.addVFL(vfl.trim());
  }

Template "grid-template"
  = ("grid-"/"-gss-grid-") "template" __ name:[0-9a-zA-Z\-_]+ lines:TemplateLine+ options:TemplateOptions
  {
     p.addTemplate(lines,p.stringify(name),options);    
  }

TemplateLine "template line"
  = __ '"' zones:TemplateZone+ '"' __
  {
    return p.processHZones(zones);    
  }

TemplateOptions "Template Options"
  = o:TemplateOption* {
    var result = {};
    if (o) {
      result = {}
      o.forEach(function(obj){
        result[obj.key] = obj.value;
      })
    } 
    return result;
  } 

TemplateOption 'TemplateOption'
  = __ key:NameChars+ "(" value:OpionValueChars+ ")" {return {key:key.join(''), value:value.join('')};}

OpionValueChars
  = [^>=<!)]


TemplateZone "Template Zone"
  = zone:( "0"+/"1"+/"2"+/"3"+/"4"+/"5"+/"6"+/"7"+/"8"+/"9"+
  / "a"+/"b"+/"c"+/"d"+/"e"+/"f"+"g"+/"h"+/"i"+/"j"+/"k"+/"l"+/"m"+/"n"+/"o"+/"p"+/"q"+/"r"+/"s"+/"t"+/"u"+/"v"+/"w"+/"x"+/"y"+/"z"+
  / "A"+/"B"+/"C"+/"D"+/"E"+/"F"+/"G"+/"H"+/"I"+/"J"+/"K"+/"L"+/"M"+/"N"+/"O"+/"P"+/"Q"+/"R"+/"S"+/"T"+/"U"+/"V"+/"W"+/"X"+/"Y"+/"Z"+ ) 
  {
    return {xspan:zone.length,name:zone[0],x:zone};
  }
  / "." 
  {
    var name = p.getBlankName();
    return {xspan:1,name:name,x:[name]};
  }


RowColDimension "Row or Col Dimension"
  = ("rows") {return 0;}
  / ("cols") {return 1;}

Line "1D Line"
  = headcon:Connection? head:LineChunk tails:LineChunk* {
    var result; 
    result = "|";
    if (headcon) {result += headcon;}
    result += head;
    tails.forEach(function (tail){
      result += tail;
    });
    result += "|";
    return result;
  }

LineChunk "!D LineChunk"
  = __ name:VirtualNameChars+ __ connect:Connection? __ {
    
    var result;
    name = p.trim(name);
    result = '["'+name+'"]';    
    p.addVirtual(name);
    if (connect) {
      result = result + connect;
    }
    return result;
  }

Connection "1D Connection"
  = connect:(("-"/"~") ([0-9]+ / "-")? ("-"/"~")?) {return p.stringify(connect);}

ConnectionTypes "!D Connection Type"
  = "-" / "~"
  / "-" ([0-9]+) "-"
  / "~" ([0-9]+ / "-") "~"


VirtualNameChars
  = [a-zA-Z0-9#_$:]

NameChars
  = [a-zA-Z0-9#.\-_$:]

NameCharsWithSpace
  = NameChars / " "

Literal
  = val:Number {
    return [ "number",
      val
    ];
  }

Number
  = Real / Integer

Integer
  = digits:[0-9]+ {
    return parseInt(digits.join(""), 10);
  }

Real
  = digits:(Integer "." Integer) {
    return parseFloat(digits.join(""));
  }

SignedInteger
  = [-+]? [0-9]+

SourceCharacter
  = .

WhiteSpace "whitespace"
  = [\t\v\f \u00A0\uFEFF]

LineTerminator
  = [\n\r\u2028\u2029]

LineTerminatorSequence "end of line"
  = "\n"
  / "\r\n"
  / "\r"
  / "\u2028" // line separator
  / "\u2029" // paragraph separator

AnyChar
  = [a-zA-Z0-9 .,#:+?!^=()_\-$*/\\""'\[\]]

EOS "End of Statement"
  = __ ";"
  / _ LineTerminatorSequence
  / __ EOF

EOF
  = !.

Comment "Comment"
  = MultiLineComment
  / SingleLineComment

MultiLineComment "MultiLineComment"
  = "/*" (!"*/" SourceCharacter)* "*/"

MultiLineCommentNoLineTerminator "MultiLineCommentNoLineTerminator"
  = "/*" (!("*/" / LineTerminator) SourceCharacter)* "*/"

SingleLineComment "Single Line Comment"
  = "//" (!LineTerminator SourceCharacter)* (LineTerminator / EOF)

_ "Whitespace / Comment"
  = (WhiteSpace / MultiLineCommentNoLineTerminator / SingleLineComment)*

__ "Whitespace / Comment / Newline"
  = (WhiteSpace / LineTerminatorSequence / Comment)*
