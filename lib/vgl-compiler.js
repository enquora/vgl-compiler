module.exports = (function() {
  /*
   * Generated by PEG.js 0.8.0.
   *
   * http://pegjs.majda.cz/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function SyntaxError(message, expected, found, offset, line, column) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.offset   = offset;
    this.line     = line;
    this.column   = column;

    this.name     = "SyntaxError";
  }

  peg$subclass(SyntaxError, Error);

  function parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},

        peg$FAILED = {},

        peg$startRuleFunctions = { start: peg$parsestart },
        peg$startRuleFunction  = peg$parsestart,

        peg$c0 = peg$FAILED,
        peg$c1 = [],
        peg$c2 = function() {return p.getResults()},
        peg$c3 = "@",
        peg$c4 = { type: "literal", value: "@", description: "\"@\"" },
        peg$c5 = function(vfls) { return vfls; },
        peg$c6 = { type: "other", description: "grid-rows / grid-cols" },
        peg$c7 = "grid-",
        peg$c8 = { type: "literal", value: "grid-", description: "\"grid-\"" },
        peg$c9 = "-gss-grid-",
        peg$c10 = { type: "literal", value: "-gss-grid-", description: "\"-gss-grid-\"" },
        peg$c11 = "\"",
        peg$c12 = { type: "literal", value: "\"", description: "\"\\\"\"" },
        peg$c13 = function(d, line, stuff) {
            var vfl, props;
            vfl = "@"+ ['v','h'][d] +" "+ 
              line +" "+
              "in"+"(::)" +" "+ 
              "chain-"+p.size[d]+"(::["+p.size[d] +"]) "+       
              "chain-"+p.size[1-d] +" "+
              "chain-"+p.pos[d]+"(::["+p.pos[d] +"]) "+
              p.trim(stuff);
            p.addVFL(vfl.trim());
          },
        peg$c14 = { type: "other", description: "grid-template" },
        peg$c15 = "template",
        peg$c16 = { type: "literal", value: "template", description: "\"template\"" },
        peg$c17 = /^[0-9a-zA-Z\-_]/,
        peg$c18 = { type: "class", value: "[0-9a-zA-Z\\-_]", description: "[0-9a-zA-Z\\-_]" },
        peg$c19 = function(name, lines, options) {
             p.addTemplate(lines,p.stringify(name),options);    
          },
        peg$c20 = { type: "other", description: "template line" },
        peg$c21 = function(zones) {
            return p.processHZones(zones);    
          },
        peg$c22 = { type: "other", description: "Template Options" },
        peg$c23 = function(o) {
            var result = {};
            if (o) {
              result = {}
              o.forEach(function(obj){
                result[obj.key] = obj.value;
              })
            } 
            return result;
          },
        peg$c24 = { type: "other", description: "TemplateOption" },
        peg$c25 = "(",
        peg$c26 = { type: "literal", value: "(", description: "\"(\"" },
        peg$c27 = ")",
        peg$c28 = { type: "literal", value: ")", description: "\")\"" },
        peg$c29 = function(key, value) {return {key:key.join(''), value:value.join('')};},
        peg$c30 = /^[^>=<!)]/,
        peg$c31 = { type: "class", value: "[^>=<!)]", description: "[^>=<!)]" },
        peg$c32 = { type: "other", description: "Template Zone" },
        peg$c33 = "0",
        peg$c34 = { type: "literal", value: "0", description: "\"0\"" },
        peg$c35 = "1",
        peg$c36 = { type: "literal", value: "1", description: "\"1\"" },
        peg$c37 = "2",
        peg$c38 = { type: "literal", value: "2", description: "\"2\"" },
        peg$c39 = "3",
        peg$c40 = { type: "literal", value: "3", description: "\"3\"" },
        peg$c41 = "4",
        peg$c42 = { type: "literal", value: "4", description: "\"4\"" },
        peg$c43 = "5",
        peg$c44 = { type: "literal", value: "5", description: "\"5\"" },
        peg$c45 = "6",
        peg$c46 = { type: "literal", value: "6", description: "\"6\"" },
        peg$c47 = "7",
        peg$c48 = { type: "literal", value: "7", description: "\"7\"" },
        peg$c49 = "8",
        peg$c50 = { type: "literal", value: "8", description: "\"8\"" },
        peg$c51 = "9",
        peg$c52 = { type: "literal", value: "9", description: "\"9\"" },
        peg$c53 = "a",
        peg$c54 = { type: "literal", value: "a", description: "\"a\"" },
        peg$c55 = "b",
        peg$c56 = { type: "literal", value: "b", description: "\"b\"" },
        peg$c57 = "c",
        peg$c58 = { type: "literal", value: "c", description: "\"c\"" },
        peg$c59 = "d",
        peg$c60 = { type: "literal", value: "d", description: "\"d\"" },
        peg$c61 = "e",
        peg$c62 = { type: "literal", value: "e", description: "\"e\"" },
        peg$c63 = "f",
        peg$c64 = { type: "literal", value: "f", description: "\"f\"" },
        peg$c65 = "g",
        peg$c66 = { type: "literal", value: "g", description: "\"g\"" },
        peg$c67 = "h",
        peg$c68 = { type: "literal", value: "h", description: "\"h\"" },
        peg$c69 = "i",
        peg$c70 = { type: "literal", value: "i", description: "\"i\"" },
        peg$c71 = "j",
        peg$c72 = { type: "literal", value: "j", description: "\"j\"" },
        peg$c73 = "k",
        peg$c74 = { type: "literal", value: "k", description: "\"k\"" },
        peg$c75 = "l",
        peg$c76 = { type: "literal", value: "l", description: "\"l\"" },
        peg$c77 = "m",
        peg$c78 = { type: "literal", value: "m", description: "\"m\"" },
        peg$c79 = "n",
        peg$c80 = { type: "literal", value: "n", description: "\"n\"" },
        peg$c81 = "o",
        peg$c82 = { type: "literal", value: "o", description: "\"o\"" },
        peg$c83 = "p",
        peg$c84 = { type: "literal", value: "p", description: "\"p\"" },
        peg$c85 = "q",
        peg$c86 = { type: "literal", value: "q", description: "\"q\"" },
        peg$c87 = "r",
        peg$c88 = { type: "literal", value: "r", description: "\"r\"" },
        peg$c89 = "s",
        peg$c90 = { type: "literal", value: "s", description: "\"s\"" },
        peg$c91 = "t",
        peg$c92 = { type: "literal", value: "t", description: "\"t\"" },
        peg$c93 = "u",
        peg$c94 = { type: "literal", value: "u", description: "\"u\"" },
        peg$c95 = "v",
        peg$c96 = { type: "literal", value: "v", description: "\"v\"" },
        peg$c97 = "w",
        peg$c98 = { type: "literal", value: "w", description: "\"w\"" },
        peg$c99 = "x",
        peg$c100 = { type: "literal", value: "x", description: "\"x\"" },
        peg$c101 = "y",
        peg$c102 = { type: "literal", value: "y", description: "\"y\"" },
        peg$c103 = "z",
        peg$c104 = { type: "literal", value: "z", description: "\"z\"" },
        peg$c105 = "A",
        peg$c106 = { type: "literal", value: "A", description: "\"A\"" },
        peg$c107 = "B",
        peg$c108 = { type: "literal", value: "B", description: "\"B\"" },
        peg$c109 = "C",
        peg$c110 = { type: "literal", value: "C", description: "\"C\"" },
        peg$c111 = "D",
        peg$c112 = { type: "literal", value: "D", description: "\"D\"" },
        peg$c113 = "E",
        peg$c114 = { type: "literal", value: "E", description: "\"E\"" },
        peg$c115 = "F",
        peg$c116 = { type: "literal", value: "F", description: "\"F\"" },
        peg$c117 = "G",
        peg$c118 = { type: "literal", value: "G", description: "\"G\"" },
        peg$c119 = "H",
        peg$c120 = { type: "literal", value: "H", description: "\"H\"" },
        peg$c121 = "I",
        peg$c122 = { type: "literal", value: "I", description: "\"I\"" },
        peg$c123 = "J",
        peg$c124 = { type: "literal", value: "J", description: "\"J\"" },
        peg$c125 = "K",
        peg$c126 = { type: "literal", value: "K", description: "\"K\"" },
        peg$c127 = "L",
        peg$c128 = { type: "literal", value: "L", description: "\"L\"" },
        peg$c129 = "M",
        peg$c130 = { type: "literal", value: "M", description: "\"M\"" },
        peg$c131 = "N",
        peg$c132 = { type: "literal", value: "N", description: "\"N\"" },
        peg$c133 = "O",
        peg$c134 = { type: "literal", value: "O", description: "\"O\"" },
        peg$c135 = "P",
        peg$c136 = { type: "literal", value: "P", description: "\"P\"" },
        peg$c137 = "Q",
        peg$c138 = { type: "literal", value: "Q", description: "\"Q\"" },
        peg$c139 = "R",
        peg$c140 = { type: "literal", value: "R", description: "\"R\"" },
        peg$c141 = "S",
        peg$c142 = { type: "literal", value: "S", description: "\"S\"" },
        peg$c143 = "T",
        peg$c144 = { type: "literal", value: "T", description: "\"T\"" },
        peg$c145 = "U",
        peg$c146 = { type: "literal", value: "U", description: "\"U\"" },
        peg$c147 = "V",
        peg$c148 = { type: "literal", value: "V", description: "\"V\"" },
        peg$c149 = "W",
        peg$c150 = { type: "literal", value: "W", description: "\"W\"" },
        peg$c151 = "X",
        peg$c152 = { type: "literal", value: "X", description: "\"X\"" },
        peg$c153 = "Y",
        peg$c154 = { type: "literal", value: "Y", description: "\"Y\"" },
        peg$c155 = "Z",
        peg$c156 = { type: "literal", value: "Z", description: "\"Z\"" },
        peg$c157 = function(zone) {
            return {xspan:zone.length,name:zone[0],x:zone};
          },
        peg$c158 = ".",
        peg$c159 = { type: "literal", value: ".", description: "\".\"" },
        peg$c160 = function() {
            var name = p.getBlankName();
            return {xspan:1,name:name,x:[name]};
          },
        peg$c161 = { type: "other", description: "Row or Col Dimension" },
        peg$c162 = "rows",
        peg$c163 = { type: "literal", value: "rows", description: "\"rows\"" },
        peg$c164 = function() {return 0;},
        peg$c165 = "cols",
        peg$c166 = { type: "literal", value: "cols", description: "\"cols\"" },
        peg$c167 = function() {return 1;},
        peg$c168 = { type: "other", description: "1D Line" },
        peg$c169 = null,
        peg$c170 = function(headcon, head, tails) {
            var result; 
            result = "|";
            if (headcon) {result += headcon;}
            result += head;
            tails.forEach(function (tail){
              result += tail;
            });
            result += "|";
            return result;
          },
        peg$c171 = { type: "other", description: "!D LineChunk" },
        peg$c172 = function(name, connect) {
            
            var result;
            name = p.trim(name);
            result = '["'+name+'"]';    
            p.addVirtual(name);
            if (connect) {
              result = result + connect;
            }
            return result;
          },
        peg$c173 = { type: "other", description: "1D Connection" },
        peg$c174 = "-",
        peg$c175 = { type: "literal", value: "-", description: "\"-\"" },
        peg$c176 = "~",
        peg$c177 = { type: "literal", value: "~", description: "\"~\"" },
        peg$c178 = /^[0-9]/,
        peg$c179 = { type: "class", value: "[0-9]", description: "[0-9]" },
        peg$c180 = function(connect) {return p.stringify(connect);},
        peg$c181 = { type: "other", description: "!D Connection Type" },
        peg$c182 = /^[a-zA-Z0-9#_$:]/,
        peg$c183 = { type: "class", value: "[a-zA-Z0-9#_$:]", description: "[a-zA-Z0-9#_$:]" },
        peg$c184 = /^[a-zA-Z0-9#.\-_$:]/,
        peg$c185 = { type: "class", value: "[a-zA-Z0-9#.\\-_$:]", description: "[a-zA-Z0-9#.\\-_$:]" },
        peg$c186 = " ",
        peg$c187 = { type: "literal", value: " ", description: "\" \"" },
        peg$c188 = function(val) {
            return [ "number",
              val
            ];
          },
        peg$c189 = function(digits) {
            return parseInt(digits.join(""), 10);
          },
        peg$c190 = function(digits) {
            return parseFloat(digits.join(""));
          },
        peg$c191 = /^[\-+]/,
        peg$c192 = { type: "class", value: "[\\-+]", description: "[\\-+]" },
        peg$c193 = { type: "any", description: "any character" },
        peg$c194 = { type: "other", description: "whitespace" },
        peg$c195 = /^[\t\x0B\f \xA0\uFEFF]/,
        peg$c196 = { type: "class", value: "[\\t\\x0B\\f \\xA0\\uFEFF]", description: "[\\t\\x0B\\f \\xA0\\uFEFF]" },
        peg$c197 = /^[\n\r\u2028\u2029]/,
        peg$c198 = { type: "class", value: "[\\n\\r\\u2028\\u2029]", description: "[\\n\\r\\u2028\\u2029]" },
        peg$c199 = { type: "other", description: "end of line" },
        peg$c200 = "\n",
        peg$c201 = { type: "literal", value: "\n", description: "\"\\n\"" },
        peg$c202 = "\r\n",
        peg$c203 = { type: "literal", value: "\r\n", description: "\"\\r\\n\"" },
        peg$c204 = "\r",
        peg$c205 = { type: "literal", value: "\r", description: "\"\\r\"" },
        peg$c206 = "\u2028",
        peg$c207 = { type: "literal", value: "\u2028", description: "\"\\u2028\"" },
        peg$c208 = "\u2029",
        peg$c209 = { type: "literal", value: "\u2029", description: "\"\\u2029\"" },
        peg$c210 = /^[a-zA-Z0-9 .,#:+?!\^=()_\-$*\/\\""'[\]]/,
        peg$c211 = { type: "class", value: "[a-zA-Z0-9 .,#:+?!\\^=()_\\-$*\\/\\\\\"\"'[\\]]", description: "[a-zA-Z0-9 .,#:+?!\\^=()_\\-$*\\/\\\\\"\"'[\\]]" },
        peg$c212 = { type: "other", description: "End of Statement" },
        peg$c213 = ";",
        peg$c214 = { type: "literal", value: ";", description: "\";\"" },
        peg$c215 = void 0,
        peg$c216 = { type: "other", description: "Comment" },
        peg$c217 = { type: "other", description: "MultiLineComment" },
        peg$c218 = "/*",
        peg$c219 = { type: "literal", value: "/*", description: "\"/*\"" },
        peg$c220 = "*/",
        peg$c221 = { type: "literal", value: "*/", description: "\"*/\"" },
        peg$c222 = { type: "other", description: "MultiLineCommentNoLineTerminator" },
        peg$c223 = { type: "other", description: "Single Line Comment" },
        peg$c224 = "//",
        peg$c225 = { type: "literal", value: "//", description: "\"//\"" },
        peg$c226 = { type: "other", description: "Whitespace / Comment" },
        peg$c227 = { type: "other", description: "Whitespace / Comment / Newline" },

        peg$currPos          = 0,
        peg$reportedPos      = 0,
        peg$cachedPos        = 0,
        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$reportedPos, peg$currPos);
    }

    function offset() {
      return peg$reportedPos;
    }

    function line() {
      return peg$computePosDetails(peg$reportedPos).line;
    }

    function column() {
      return peg$computePosDetails(peg$reportedPos).column;
    }

    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: "other", description: description }],
        peg$reportedPos
      );
    }

    function error(message) {
      throw peg$buildException(message, null, peg$reportedPos);
    }

    function peg$computePosDetails(pos) {
      function advance(details, startPos, endPos) {
        var p, ch;

        for (p = startPos; p < endPos; p++) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }
        }
      }

      if (peg$cachedPos !== pos) {
        if (peg$cachedPos > pos) {
          peg$cachedPos = 0;
          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
        }
        advance(peg$cachedPosDetails, peg$cachedPos, pos);
        peg$cachedPos = pos;
      }

      return peg$cachedPosDetails;
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, pos) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0180-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1080-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      var posDetails = peg$computePosDetails(pos),
          found      = pos < input.length ? input.charAt(pos) : null;

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        pos,
        posDetails.line,
        posDetails.column
      );
    }

    function peg$parsestart() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parse__();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseStatement();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseStatement();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parse__();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c2();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseStatement() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 64) {
        s1 = peg$c3;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c4); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseVGLStatement();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseEOS();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse__();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c5(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseVGLStatement() {
      var s0;

      s0 = peg$parseRowsCols();
      if (s0 === peg$FAILED) {
        s0 = peg$parseTemplate();
      }

      return s0;
    }

    function peg$parseRowsCols() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c7) {
        s1 = peg$c7;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c8); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 10) === peg$c9) {
          s1 = peg$c9;
          peg$currPos += 10;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c10); }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseRowColDimension();
        if (s2 !== peg$FAILED) {
          s3 = peg$parse__();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 34) {
              s4 = peg$c11;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c12); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseLine();
              if (s5 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 34) {
                  s6 = peg$c11;
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c12); }
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parse__();
                  if (s7 !== peg$FAILED) {
                    s8 = [];
                    s9 = peg$parseAnyChar();
                    while (s9 !== peg$FAILED) {
                      s8.push(s9);
                      s9 = peg$parseAnyChar();
                    }
                    if (s8 !== peg$FAILED) {
                      peg$reportedPos = s0;
                      s1 = peg$c13(s2, s5, s8);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c6); }
      }

      return s0;
    }

    function peg$parseTemplate() {
      var s0, s1, s2, s3, s4, s5, s6;

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c7) {
        s1 = peg$c7;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c8); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 10) === peg$c9) {
          s1 = peg$c9;
          peg$currPos += 10;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c10); }
        }
      }
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 8) === peg$c15) {
          s2 = peg$c15;
          peg$currPos += 8;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c16); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parse__();
          if (s3 !== peg$FAILED) {
            s4 = [];
            if (peg$c17.test(input.charAt(peg$currPos))) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c18); }
            }
            if (s5 !== peg$FAILED) {
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                if (peg$c17.test(input.charAt(peg$currPos))) {
                  s5 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c18); }
                }
              }
            } else {
              s4 = peg$c0;
            }
            if (s4 !== peg$FAILED) {
              s5 = [];
              s6 = peg$parseTemplateLine();
              if (s6 !== peg$FAILED) {
                while (s6 !== peg$FAILED) {
                  s5.push(s6);
                  s6 = peg$parseTemplateLine();
                }
              } else {
                s5 = peg$c0;
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parseTemplateOptions();
                if (s6 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c19(s4, s5, s6);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c14); }
      }

      return s0;
    }

    function peg$parseTemplateLine() {
      var s0, s1, s2, s3, s4, s5;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parse__();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 34) {
          s2 = peg$c11;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c12); }
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parseTemplateZone();
          if (s4 !== peg$FAILED) {
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$parseTemplateZone();
            }
          } else {
            s3 = peg$c0;
          }
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 34) {
              s4 = peg$c11;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c12); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parse__();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c21(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c20); }
      }

      return s0;
    }

    function peg$parseTemplateOptions() {
      var s0, s1, s2;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseTemplateOption();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseTemplateOption();
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c23(s1);
      }
      s0 = s1;
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c22); }
      }

      return s0;
    }

    function peg$parseTemplateOption() {
      var s0, s1, s2, s3, s4, s5;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parse__();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseNameChars();
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseNameChars();
          }
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 40) {
            s3 = peg$c25;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c26); }
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parseOpionValueChars();
            if (s5 !== peg$FAILED) {
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$parseOpionValueChars();
              }
            } else {
              s4 = peg$c0;
            }
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 41) {
                s5 = peg$c27;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c28); }
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c29(s2, s4);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c24); }
      }

      return s0;
    }

    function peg$parseOpionValueChars() {
      var s0;

      if (peg$c30.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c31); }
      }

      return s0;
    }

    function peg$parseTemplateZone() {
      var s0, s1, s2, s3, s4;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = [];
      if (input.charCodeAt(peg$currPos) === 48) {
        s2 = peg$c33;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c34); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (input.charCodeAt(peg$currPos) === 48) {
            s2 = peg$c33;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c34); }
          }
        }
      } else {
        s1 = peg$c0;
      }
      if (s1 === peg$FAILED) {
        s1 = [];
        if (input.charCodeAt(peg$currPos) === 49) {
          s2 = peg$c35;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c36); }
        }
        if (s2 !== peg$FAILED) {
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            if (input.charCodeAt(peg$currPos) === 49) {
              s2 = peg$c35;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c36); }
            }
          }
        } else {
          s1 = peg$c0;
        }
        if (s1 === peg$FAILED) {
          s1 = [];
          if (input.charCodeAt(peg$currPos) === 50) {
            s2 = peg$c37;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c38); }
          }
          if (s2 !== peg$FAILED) {
            while (s2 !== peg$FAILED) {
              s1.push(s2);
              if (input.charCodeAt(peg$currPos) === 50) {
                s2 = peg$c37;
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c38); }
              }
            }
          } else {
            s1 = peg$c0;
          }
          if (s1 === peg$FAILED) {
            s1 = [];
            if (input.charCodeAt(peg$currPos) === 51) {
              s2 = peg$c39;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c40); }
            }
            if (s2 !== peg$FAILED) {
              while (s2 !== peg$FAILED) {
                s1.push(s2);
                if (input.charCodeAt(peg$currPos) === 51) {
                  s2 = peg$c39;
                  peg$currPos++;
                } else {
                  s2 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c40); }
                }
              }
            } else {
              s1 = peg$c0;
            }
            if (s1 === peg$FAILED) {
              s1 = [];
              if (input.charCodeAt(peg$currPos) === 52) {
                s2 = peg$c41;
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c42); }
              }
              if (s2 !== peg$FAILED) {
                while (s2 !== peg$FAILED) {
                  s1.push(s2);
                  if (input.charCodeAt(peg$currPos) === 52) {
                    s2 = peg$c41;
                    peg$currPos++;
                  } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c42); }
                  }
                }
              } else {
                s1 = peg$c0;
              }
              if (s1 === peg$FAILED) {
                s1 = [];
                if (input.charCodeAt(peg$currPos) === 53) {
                  s2 = peg$c43;
                  peg$currPos++;
                } else {
                  s2 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c44); }
                }
                if (s2 !== peg$FAILED) {
                  while (s2 !== peg$FAILED) {
                    s1.push(s2);
                    if (input.charCodeAt(peg$currPos) === 53) {
                      s2 = peg$c43;
                      peg$currPos++;
                    } else {
                      s2 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c44); }
                    }
                  }
                } else {
                  s1 = peg$c0;
                }
                if (s1 === peg$FAILED) {
                  s1 = [];
                  if (input.charCodeAt(peg$currPos) === 54) {
                    s2 = peg$c45;
                    peg$currPos++;
                  } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c46); }
                  }
                  if (s2 !== peg$FAILED) {
                    while (s2 !== peg$FAILED) {
                      s1.push(s2);
                      if (input.charCodeAt(peg$currPos) === 54) {
                        s2 = peg$c45;
                        peg$currPos++;
                      } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c46); }
                      }
                    }
                  } else {
                    s1 = peg$c0;
                  }
                  if (s1 === peg$FAILED) {
                    s1 = [];
                    if (input.charCodeAt(peg$currPos) === 55) {
                      s2 = peg$c47;
                      peg$currPos++;
                    } else {
                      s2 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c48); }
                    }
                    if (s2 !== peg$FAILED) {
                      while (s2 !== peg$FAILED) {
                        s1.push(s2);
                        if (input.charCodeAt(peg$currPos) === 55) {
                          s2 = peg$c47;
                          peg$currPos++;
                        } else {
                          s2 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c48); }
                        }
                      }
                    } else {
                      s1 = peg$c0;
                    }
                    if (s1 === peg$FAILED) {
                      s1 = [];
                      if (input.charCodeAt(peg$currPos) === 56) {
                        s2 = peg$c49;
                        peg$currPos++;
                      } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c50); }
                      }
                      if (s2 !== peg$FAILED) {
                        while (s2 !== peg$FAILED) {
                          s1.push(s2);
                          if (input.charCodeAt(peg$currPos) === 56) {
                            s2 = peg$c49;
                            peg$currPos++;
                          } else {
                            s2 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c50); }
                          }
                        }
                      } else {
                        s1 = peg$c0;
                      }
                      if (s1 === peg$FAILED) {
                        s1 = [];
                        if (input.charCodeAt(peg$currPos) === 57) {
                          s2 = peg$c51;
                          peg$currPos++;
                        } else {
                          s2 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c52); }
                        }
                        if (s2 !== peg$FAILED) {
                          while (s2 !== peg$FAILED) {
                            s1.push(s2);
                            if (input.charCodeAt(peg$currPos) === 57) {
                              s2 = peg$c51;
                              peg$currPos++;
                            } else {
                              s2 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c52); }
                            }
                          }
                        } else {
                          s1 = peg$c0;
                        }
                        if (s1 === peg$FAILED) {
                          s1 = [];
                          if (input.charCodeAt(peg$currPos) === 97) {
                            s2 = peg$c53;
                            peg$currPos++;
                          } else {
                            s2 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c54); }
                          }
                          if (s2 !== peg$FAILED) {
                            while (s2 !== peg$FAILED) {
                              s1.push(s2);
                              if (input.charCodeAt(peg$currPos) === 97) {
                                s2 = peg$c53;
                                peg$currPos++;
                              } else {
                                s2 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c54); }
                              }
                            }
                          } else {
                            s1 = peg$c0;
                          }
                          if (s1 === peg$FAILED) {
                            s1 = [];
                            if (input.charCodeAt(peg$currPos) === 98) {
                              s2 = peg$c55;
                              peg$currPos++;
                            } else {
                              s2 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c56); }
                            }
                            if (s2 !== peg$FAILED) {
                              while (s2 !== peg$FAILED) {
                                s1.push(s2);
                                if (input.charCodeAt(peg$currPos) === 98) {
                                  s2 = peg$c55;
                                  peg$currPos++;
                                } else {
                                  s2 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c56); }
                                }
                              }
                            } else {
                              s1 = peg$c0;
                            }
                            if (s1 === peg$FAILED) {
                              s1 = [];
                              if (input.charCodeAt(peg$currPos) === 99) {
                                s2 = peg$c57;
                                peg$currPos++;
                              } else {
                                s2 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c58); }
                              }
                              if (s2 !== peg$FAILED) {
                                while (s2 !== peg$FAILED) {
                                  s1.push(s2);
                                  if (input.charCodeAt(peg$currPos) === 99) {
                                    s2 = peg$c57;
                                    peg$currPos++;
                                  } else {
                                    s2 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c58); }
                                  }
                                }
                              } else {
                                s1 = peg$c0;
                              }
                              if (s1 === peg$FAILED) {
                                s1 = [];
                                if (input.charCodeAt(peg$currPos) === 100) {
                                  s2 = peg$c59;
                                  peg$currPos++;
                                } else {
                                  s2 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c60); }
                                }
                                if (s2 !== peg$FAILED) {
                                  while (s2 !== peg$FAILED) {
                                    s1.push(s2);
                                    if (input.charCodeAt(peg$currPos) === 100) {
                                      s2 = peg$c59;
                                      peg$currPos++;
                                    } else {
                                      s2 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c60); }
                                    }
                                  }
                                } else {
                                  s1 = peg$c0;
                                }
                                if (s1 === peg$FAILED) {
                                  s1 = [];
                                  if (input.charCodeAt(peg$currPos) === 101) {
                                    s2 = peg$c61;
                                    peg$currPos++;
                                  } else {
                                    s2 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c62); }
                                  }
                                  if (s2 !== peg$FAILED) {
                                    while (s2 !== peg$FAILED) {
                                      s1.push(s2);
                                      if (input.charCodeAt(peg$currPos) === 101) {
                                        s2 = peg$c61;
                                        peg$currPos++;
                                      } else {
                                        s2 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c62); }
                                      }
                                    }
                                  } else {
                                    s1 = peg$c0;
                                  }
                                  if (s1 === peg$FAILED) {
                                    s1 = peg$currPos;
                                    s2 = [];
                                    if (input.charCodeAt(peg$currPos) === 102) {
                                      s3 = peg$c63;
                                      peg$currPos++;
                                    } else {
                                      s3 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c64); }
                                    }
                                    if (s3 !== peg$FAILED) {
                                      while (s3 !== peg$FAILED) {
                                        s2.push(s3);
                                        if (input.charCodeAt(peg$currPos) === 102) {
                                          s3 = peg$c63;
                                          peg$currPos++;
                                        } else {
                                          s3 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c64); }
                                        }
                                      }
                                    } else {
                                      s2 = peg$c0;
                                    }
                                    if (s2 !== peg$FAILED) {
                                      s3 = [];
                                      if (input.charCodeAt(peg$currPos) === 103) {
                                        s4 = peg$c65;
                                        peg$currPos++;
                                      } else {
                                        s4 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c66); }
                                      }
                                      if (s4 !== peg$FAILED) {
                                        while (s4 !== peg$FAILED) {
                                          s3.push(s4);
                                          if (input.charCodeAt(peg$currPos) === 103) {
                                            s4 = peg$c65;
                                            peg$currPos++;
                                          } else {
                                            s4 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c66); }
                                          }
                                        }
                                      } else {
                                        s3 = peg$c0;
                                      }
                                      if (s3 !== peg$FAILED) {
                                        s2 = [s2, s3];
                                        s1 = s2;
                                      } else {
                                        peg$currPos = s1;
                                        s1 = peg$c0;
                                      }
                                    } else {
                                      peg$currPos = s1;
                                      s1 = peg$c0;
                                    }
                                    if (s1 === peg$FAILED) {
                                      s1 = [];
                                      if (input.charCodeAt(peg$currPos) === 104) {
                                        s2 = peg$c67;
                                        peg$currPos++;
                                      } else {
                                        s2 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c68); }
                                      }
                                      if (s2 !== peg$FAILED) {
                                        while (s2 !== peg$FAILED) {
                                          s1.push(s2);
                                          if (input.charCodeAt(peg$currPos) === 104) {
                                            s2 = peg$c67;
                                            peg$currPos++;
                                          } else {
                                            s2 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c68); }
                                          }
                                        }
                                      } else {
                                        s1 = peg$c0;
                                      }
                                      if (s1 === peg$FAILED) {
                                        s1 = [];
                                        if (input.charCodeAt(peg$currPos) === 105) {
                                          s2 = peg$c69;
                                          peg$currPos++;
                                        } else {
                                          s2 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c70); }
                                        }
                                        if (s2 !== peg$FAILED) {
                                          while (s2 !== peg$FAILED) {
                                            s1.push(s2);
                                            if (input.charCodeAt(peg$currPos) === 105) {
                                              s2 = peg$c69;
                                              peg$currPos++;
                                            } else {
                                              s2 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$c70); }
                                            }
                                          }
                                        } else {
                                          s1 = peg$c0;
                                        }
                                        if (s1 === peg$FAILED) {
                                          s1 = [];
                                          if (input.charCodeAt(peg$currPos) === 106) {
                                            s2 = peg$c71;
                                            peg$currPos++;
                                          } else {
                                            s2 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c72); }
                                          }
                                          if (s2 !== peg$FAILED) {
                                            while (s2 !== peg$FAILED) {
                                              s1.push(s2);
                                              if (input.charCodeAt(peg$currPos) === 106) {
                                                s2 = peg$c71;
                                                peg$currPos++;
                                              } else {
                                                s2 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$c72); }
                                              }
                                            }
                                          } else {
                                            s1 = peg$c0;
                                          }
                                          if (s1 === peg$FAILED) {
                                            s1 = [];
                                            if (input.charCodeAt(peg$currPos) === 107) {
                                              s2 = peg$c73;
                                              peg$currPos++;
                                            } else {
                                              s2 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$c74); }
                                            }
                                            if (s2 !== peg$FAILED) {
                                              while (s2 !== peg$FAILED) {
                                                s1.push(s2);
                                                if (input.charCodeAt(peg$currPos) === 107) {
                                                  s2 = peg$c73;
                                                  peg$currPos++;
                                                } else {
                                                  s2 = peg$FAILED;
                                                  if (peg$silentFails === 0) { peg$fail(peg$c74); }
                                                }
                                              }
                                            } else {
                                              s1 = peg$c0;
                                            }
                                            if (s1 === peg$FAILED) {
                                              s1 = [];
                                              if (input.charCodeAt(peg$currPos) === 108) {
                                                s2 = peg$c75;
                                                peg$currPos++;
                                              } else {
                                                s2 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$c76); }
                                              }
                                              if (s2 !== peg$FAILED) {
                                                while (s2 !== peg$FAILED) {
                                                  s1.push(s2);
                                                  if (input.charCodeAt(peg$currPos) === 108) {
                                                    s2 = peg$c75;
                                                    peg$currPos++;
                                                  } else {
                                                    s2 = peg$FAILED;
                                                    if (peg$silentFails === 0) { peg$fail(peg$c76); }
                                                  }
                                                }
                                              } else {
                                                s1 = peg$c0;
                                              }
                                              if (s1 === peg$FAILED) {
                                                s1 = [];
                                                if (input.charCodeAt(peg$currPos) === 109) {
                                                  s2 = peg$c77;
                                                  peg$currPos++;
                                                } else {
                                                  s2 = peg$FAILED;
                                                  if (peg$silentFails === 0) { peg$fail(peg$c78); }
                                                }
                                                if (s2 !== peg$FAILED) {
                                                  while (s2 !== peg$FAILED) {
                                                    s1.push(s2);
                                                    if (input.charCodeAt(peg$currPos) === 109) {
                                                      s2 = peg$c77;
                                                      peg$currPos++;
                                                    } else {
                                                      s2 = peg$FAILED;
                                                      if (peg$silentFails === 0) { peg$fail(peg$c78); }
                                                    }
                                                  }
                                                } else {
                                                  s1 = peg$c0;
                                                }
                                                if (s1 === peg$FAILED) {
                                                  s1 = [];
                                                  if (input.charCodeAt(peg$currPos) === 110) {
                                                    s2 = peg$c79;
                                                    peg$currPos++;
                                                  } else {
                                                    s2 = peg$FAILED;
                                                    if (peg$silentFails === 0) { peg$fail(peg$c80); }
                                                  }
                                                  if (s2 !== peg$FAILED) {
                                                    while (s2 !== peg$FAILED) {
                                                      s1.push(s2);
                                                      if (input.charCodeAt(peg$currPos) === 110) {
                                                        s2 = peg$c79;
                                                        peg$currPos++;
                                                      } else {
                                                        s2 = peg$FAILED;
                                                        if (peg$silentFails === 0) { peg$fail(peg$c80); }
                                                      }
                                                    }
                                                  } else {
                                                    s1 = peg$c0;
                                                  }
                                                  if (s1 === peg$FAILED) {
                                                    s1 = [];
                                                    if (input.charCodeAt(peg$currPos) === 111) {
                                                      s2 = peg$c81;
                                                      peg$currPos++;
                                                    } else {
                                                      s2 = peg$FAILED;
                                                      if (peg$silentFails === 0) { peg$fail(peg$c82); }
                                                    }
                                                    if (s2 !== peg$FAILED) {
                                                      while (s2 !== peg$FAILED) {
                                                        s1.push(s2);
                                                        if (input.charCodeAt(peg$currPos) === 111) {
                                                          s2 = peg$c81;
                                                          peg$currPos++;
                                                        } else {
                                                          s2 = peg$FAILED;
                                                          if (peg$silentFails === 0) { peg$fail(peg$c82); }
                                                        }
                                                      }
                                                    } else {
                                                      s1 = peg$c0;
                                                    }
                                                    if (s1 === peg$FAILED) {
                                                      s1 = [];
                                                      if (input.charCodeAt(peg$currPos) === 112) {
                                                        s2 = peg$c83;
                                                        peg$currPos++;
                                                      } else {
                                                        s2 = peg$FAILED;
                                                        if (peg$silentFails === 0) { peg$fail(peg$c84); }
                                                      }
                                                      if (s2 !== peg$FAILED) {
                                                        while (s2 !== peg$FAILED) {
                                                          s1.push(s2);
                                                          if (input.charCodeAt(peg$currPos) === 112) {
                                                            s2 = peg$c83;
                                                            peg$currPos++;
                                                          } else {
                                                            s2 = peg$FAILED;
                                                            if (peg$silentFails === 0) { peg$fail(peg$c84); }
                                                          }
                                                        }
                                                      } else {
                                                        s1 = peg$c0;
                                                      }
                                                      if (s1 === peg$FAILED) {
                                                        s1 = [];
                                                        if (input.charCodeAt(peg$currPos) === 113) {
                                                          s2 = peg$c85;
                                                          peg$currPos++;
                                                        } else {
                                                          s2 = peg$FAILED;
                                                          if (peg$silentFails === 0) { peg$fail(peg$c86); }
                                                        }
                                                        if (s2 !== peg$FAILED) {
                                                          while (s2 !== peg$FAILED) {
                                                            s1.push(s2);
                                                            if (input.charCodeAt(peg$currPos) === 113) {
                                                              s2 = peg$c85;
                                                              peg$currPos++;
                                                            } else {
                                                              s2 = peg$FAILED;
                                                              if (peg$silentFails === 0) { peg$fail(peg$c86); }
                                                            }
                                                          }
                                                        } else {
                                                          s1 = peg$c0;
                                                        }
                                                        if (s1 === peg$FAILED) {
                                                          s1 = [];
                                                          if (input.charCodeAt(peg$currPos) === 114) {
                                                            s2 = peg$c87;
                                                            peg$currPos++;
                                                          } else {
                                                            s2 = peg$FAILED;
                                                            if (peg$silentFails === 0) { peg$fail(peg$c88); }
                                                          }
                                                          if (s2 !== peg$FAILED) {
                                                            while (s2 !== peg$FAILED) {
                                                              s1.push(s2);
                                                              if (input.charCodeAt(peg$currPos) === 114) {
                                                                s2 = peg$c87;
                                                                peg$currPos++;
                                                              } else {
                                                                s2 = peg$FAILED;
                                                                if (peg$silentFails === 0) { peg$fail(peg$c88); }
                                                              }
                                                            }
                                                          } else {
                                                            s1 = peg$c0;
                                                          }
                                                          if (s1 === peg$FAILED) {
                                                            s1 = [];
                                                            if (input.charCodeAt(peg$currPos) === 115) {
                                                              s2 = peg$c89;
                                                              peg$currPos++;
                                                            } else {
                                                              s2 = peg$FAILED;
                                                              if (peg$silentFails === 0) { peg$fail(peg$c90); }
                                                            }
                                                            if (s2 !== peg$FAILED) {
                                                              while (s2 !== peg$FAILED) {
                                                                s1.push(s2);
                                                                if (input.charCodeAt(peg$currPos) === 115) {
                                                                  s2 = peg$c89;
                                                                  peg$currPos++;
                                                                } else {
                                                                  s2 = peg$FAILED;
                                                                  if (peg$silentFails === 0) { peg$fail(peg$c90); }
                                                                }
                                                              }
                                                            } else {
                                                              s1 = peg$c0;
                                                            }
                                                            if (s1 === peg$FAILED) {
                                                              s1 = [];
                                                              if (input.charCodeAt(peg$currPos) === 116) {
                                                                s2 = peg$c91;
                                                                peg$currPos++;
                                                              } else {
                                                                s2 = peg$FAILED;
                                                                if (peg$silentFails === 0) { peg$fail(peg$c92); }
                                                              }
                                                              if (s2 !== peg$FAILED) {
                                                                while (s2 !== peg$FAILED) {
                                                                  s1.push(s2);
                                                                  if (input.charCodeAt(peg$currPos) === 116) {
                                                                    s2 = peg$c91;
                                                                    peg$currPos++;
                                                                  } else {
                                                                    s2 = peg$FAILED;
                                                                    if (peg$silentFails === 0) { peg$fail(peg$c92); }
                                                                  }
                                                                }
                                                              } else {
                                                                s1 = peg$c0;
                                                              }
                                                              if (s1 === peg$FAILED) {
                                                                s1 = [];
                                                                if (input.charCodeAt(peg$currPos) === 117) {
                                                                  s2 = peg$c93;
                                                                  peg$currPos++;
                                                                } else {
                                                                  s2 = peg$FAILED;
                                                                  if (peg$silentFails === 0) { peg$fail(peg$c94); }
                                                                }
                                                                if (s2 !== peg$FAILED) {
                                                                  while (s2 !== peg$FAILED) {
                                                                    s1.push(s2);
                                                                    if (input.charCodeAt(peg$currPos) === 117) {
                                                                      s2 = peg$c93;
                                                                      peg$currPos++;
                                                                    } else {
                                                                      s2 = peg$FAILED;
                                                                      if (peg$silentFails === 0) { peg$fail(peg$c94); }
                                                                    }
                                                                  }
                                                                } else {
                                                                  s1 = peg$c0;
                                                                }
                                                                if (s1 === peg$FAILED) {
                                                                  s1 = [];
                                                                  if (input.charCodeAt(peg$currPos) === 118) {
                                                                    s2 = peg$c95;
                                                                    peg$currPos++;
                                                                  } else {
                                                                    s2 = peg$FAILED;
                                                                    if (peg$silentFails === 0) { peg$fail(peg$c96); }
                                                                  }
                                                                  if (s2 !== peg$FAILED) {
                                                                    while (s2 !== peg$FAILED) {
                                                                      s1.push(s2);
                                                                      if (input.charCodeAt(peg$currPos) === 118) {
                                                                        s2 = peg$c95;
                                                                        peg$currPos++;
                                                                      } else {
                                                                        s2 = peg$FAILED;
                                                                        if (peg$silentFails === 0) { peg$fail(peg$c96); }
                                                                      }
                                                                    }
                                                                  } else {
                                                                    s1 = peg$c0;
                                                                  }
                                                                  if (s1 === peg$FAILED) {
                                                                    s1 = [];
                                                                    if (input.charCodeAt(peg$currPos) === 119) {
                                                                      s2 = peg$c97;
                                                                      peg$currPos++;
                                                                    } else {
                                                                      s2 = peg$FAILED;
                                                                      if (peg$silentFails === 0) { peg$fail(peg$c98); }
                                                                    }
                                                                    if (s2 !== peg$FAILED) {
                                                                      while (s2 !== peg$FAILED) {
                                                                        s1.push(s2);
                                                                        if (input.charCodeAt(peg$currPos) === 119) {
                                                                          s2 = peg$c97;
                                                                          peg$currPos++;
                                                                        } else {
                                                                          s2 = peg$FAILED;
                                                                          if (peg$silentFails === 0) { peg$fail(peg$c98); }
                                                                        }
                                                                      }
                                                                    } else {
                                                                      s1 = peg$c0;
                                                                    }
                                                                    if (s1 === peg$FAILED) {
                                                                      s1 = [];
                                                                      if (input.charCodeAt(peg$currPos) === 120) {
                                                                        s2 = peg$c99;
                                                                        peg$currPos++;
                                                                      } else {
                                                                        s2 = peg$FAILED;
                                                                        if (peg$silentFails === 0) { peg$fail(peg$c100); }
                                                                      }
                                                                      if (s2 !== peg$FAILED) {
                                                                        while (s2 !== peg$FAILED) {
                                                                          s1.push(s2);
                                                                          if (input.charCodeAt(peg$currPos) === 120) {
                                                                            s2 = peg$c99;
                                                                            peg$currPos++;
                                                                          } else {
                                                                            s2 = peg$FAILED;
                                                                            if (peg$silentFails === 0) { peg$fail(peg$c100); }
                                                                          }
                                                                        }
                                                                      } else {
                                                                        s1 = peg$c0;
                                                                      }
                                                                      if (s1 === peg$FAILED) {
                                                                        s1 = [];
                                                                        if (input.charCodeAt(peg$currPos) === 121) {
                                                                          s2 = peg$c101;
                                                                          peg$currPos++;
                                                                        } else {
                                                                          s2 = peg$FAILED;
                                                                          if (peg$silentFails === 0) { peg$fail(peg$c102); }
                                                                        }
                                                                        if (s2 !== peg$FAILED) {
                                                                          while (s2 !== peg$FAILED) {
                                                                            s1.push(s2);
                                                                            if (input.charCodeAt(peg$currPos) === 121) {
                                                                              s2 = peg$c101;
                                                                              peg$currPos++;
                                                                            } else {
                                                                              s2 = peg$FAILED;
                                                                              if (peg$silentFails === 0) { peg$fail(peg$c102); }
                                                                            }
                                                                          }
                                                                        } else {
                                                                          s1 = peg$c0;
                                                                        }
                                                                        if (s1 === peg$FAILED) {
                                                                          s1 = [];
                                                                          if (input.charCodeAt(peg$currPos) === 122) {
                                                                            s2 = peg$c103;
                                                                            peg$currPos++;
                                                                          } else {
                                                                            s2 = peg$FAILED;
                                                                            if (peg$silentFails === 0) { peg$fail(peg$c104); }
                                                                          }
                                                                          if (s2 !== peg$FAILED) {
                                                                            while (s2 !== peg$FAILED) {
                                                                              s1.push(s2);
                                                                              if (input.charCodeAt(peg$currPos) === 122) {
                                                                                s2 = peg$c103;
                                                                                peg$currPos++;
                                                                              } else {
                                                                                s2 = peg$FAILED;
                                                                                if (peg$silentFails === 0) { peg$fail(peg$c104); }
                                                                              }
                                                                            }
                                                                          } else {
                                                                            s1 = peg$c0;
                                                                          }
                                                                          if (s1 === peg$FAILED) {
                                                                            s1 = [];
                                                                            if (input.charCodeAt(peg$currPos) === 65) {
                                                                              s2 = peg$c105;
                                                                              peg$currPos++;
                                                                            } else {
                                                                              s2 = peg$FAILED;
                                                                              if (peg$silentFails === 0) { peg$fail(peg$c106); }
                                                                            }
                                                                            if (s2 !== peg$FAILED) {
                                                                              while (s2 !== peg$FAILED) {
                                                                                s1.push(s2);
                                                                                if (input.charCodeAt(peg$currPos) === 65) {
                                                                                  s2 = peg$c105;
                                                                                  peg$currPos++;
                                                                                } else {
                                                                                  s2 = peg$FAILED;
                                                                                  if (peg$silentFails === 0) { peg$fail(peg$c106); }
                                                                                }
                                                                              }
                                                                            } else {
                                                                              s1 = peg$c0;
                                                                            }
                                                                            if (s1 === peg$FAILED) {
                                                                              s1 = [];
                                                                              if (input.charCodeAt(peg$currPos) === 66) {
                                                                                s2 = peg$c107;
                                                                                peg$currPos++;
                                                                              } else {
                                                                                s2 = peg$FAILED;
                                                                                if (peg$silentFails === 0) { peg$fail(peg$c108); }
                                                                              }
                                                                              if (s2 !== peg$FAILED) {
                                                                                while (s2 !== peg$FAILED) {
                                                                                  s1.push(s2);
                                                                                  if (input.charCodeAt(peg$currPos) === 66) {
                                                                                    s2 = peg$c107;
                                                                                    peg$currPos++;
                                                                                  } else {
                                                                                    s2 = peg$FAILED;
                                                                                    if (peg$silentFails === 0) { peg$fail(peg$c108); }
                                                                                  }
                                                                                }
                                                                              } else {
                                                                                s1 = peg$c0;
                                                                              }
                                                                              if (s1 === peg$FAILED) {
                                                                                s1 = [];
                                                                                if (input.charCodeAt(peg$currPos) === 67) {
                                                                                  s2 = peg$c109;
                                                                                  peg$currPos++;
                                                                                } else {
                                                                                  s2 = peg$FAILED;
                                                                                  if (peg$silentFails === 0) { peg$fail(peg$c110); }
                                                                                }
                                                                                if (s2 !== peg$FAILED) {
                                                                                  while (s2 !== peg$FAILED) {
                                                                                    s1.push(s2);
                                                                                    if (input.charCodeAt(peg$currPos) === 67) {
                                                                                      s2 = peg$c109;
                                                                                      peg$currPos++;
                                                                                    } else {
                                                                                      s2 = peg$FAILED;
                                                                                      if (peg$silentFails === 0) { peg$fail(peg$c110); }
                                                                                    }
                                                                                  }
                                                                                } else {
                                                                                  s1 = peg$c0;
                                                                                }
                                                                                if (s1 === peg$FAILED) {
                                                                                  s1 = [];
                                                                                  if (input.charCodeAt(peg$currPos) === 68) {
                                                                                    s2 = peg$c111;
                                                                                    peg$currPos++;
                                                                                  } else {
                                                                                    s2 = peg$FAILED;
                                                                                    if (peg$silentFails === 0) { peg$fail(peg$c112); }
                                                                                  }
                                                                                  if (s2 !== peg$FAILED) {
                                                                                    while (s2 !== peg$FAILED) {
                                                                                      s1.push(s2);
                                                                                      if (input.charCodeAt(peg$currPos) === 68) {
                                                                                        s2 = peg$c111;
                                                                                        peg$currPos++;
                                                                                      } else {
                                                                                        s2 = peg$FAILED;
                                                                                        if (peg$silentFails === 0) { peg$fail(peg$c112); }
                                                                                      }
                                                                                    }
                                                                                  } else {
                                                                                    s1 = peg$c0;
                                                                                  }
                                                                                  if (s1 === peg$FAILED) {
                                                                                    s1 = [];
                                                                                    if (input.charCodeAt(peg$currPos) === 69) {
                                                                                      s2 = peg$c113;
                                                                                      peg$currPos++;
                                                                                    } else {
                                                                                      s2 = peg$FAILED;
                                                                                      if (peg$silentFails === 0) { peg$fail(peg$c114); }
                                                                                    }
                                                                                    if (s2 !== peg$FAILED) {
                                                                                      while (s2 !== peg$FAILED) {
                                                                                        s1.push(s2);
                                                                                        if (input.charCodeAt(peg$currPos) === 69) {
                                                                                          s2 = peg$c113;
                                                                                          peg$currPos++;
                                                                                        } else {
                                                                                          s2 = peg$FAILED;
                                                                                          if (peg$silentFails === 0) { peg$fail(peg$c114); }
                                                                                        }
                                                                                      }
                                                                                    } else {
                                                                                      s1 = peg$c0;
                                                                                    }
                                                                                    if (s1 === peg$FAILED) {
                                                                                      s1 = [];
                                                                                      if (input.charCodeAt(peg$currPos) === 70) {
                                                                                        s2 = peg$c115;
                                                                                        peg$currPos++;
                                                                                      } else {
                                                                                        s2 = peg$FAILED;
                                                                                        if (peg$silentFails === 0) { peg$fail(peg$c116); }
                                                                                      }
                                                                                      if (s2 !== peg$FAILED) {
                                                                                        while (s2 !== peg$FAILED) {
                                                                                          s1.push(s2);
                                                                                          if (input.charCodeAt(peg$currPos) === 70) {
                                                                                            s2 = peg$c115;
                                                                                            peg$currPos++;
                                                                                          } else {
                                                                                            s2 = peg$FAILED;
                                                                                            if (peg$silentFails === 0) { peg$fail(peg$c116); }
                                                                                          }
                                                                                        }
                                                                                      } else {
                                                                                        s1 = peg$c0;
                                                                                      }
                                                                                      if (s1 === peg$FAILED) {
                                                                                        s1 = [];
                                                                                        if (input.charCodeAt(peg$currPos) === 71) {
                                                                                          s2 = peg$c117;
                                                                                          peg$currPos++;
                                                                                        } else {
                                                                                          s2 = peg$FAILED;
                                                                                          if (peg$silentFails === 0) { peg$fail(peg$c118); }
                                                                                        }
                                                                                        if (s2 !== peg$FAILED) {
                                                                                          while (s2 !== peg$FAILED) {
                                                                                            s1.push(s2);
                                                                                            if (input.charCodeAt(peg$currPos) === 71) {
                                                                                              s2 = peg$c117;
                                                                                              peg$currPos++;
                                                                                            } else {
                                                                                              s2 = peg$FAILED;
                                                                                              if (peg$silentFails === 0) { peg$fail(peg$c118); }
                                                                                            }
                                                                                          }
                                                                                        } else {
                                                                                          s1 = peg$c0;
                                                                                        }
                                                                                        if (s1 === peg$FAILED) {
                                                                                          s1 = [];
                                                                                          if (input.charCodeAt(peg$currPos) === 72) {
                                                                                            s2 = peg$c119;
                                                                                            peg$currPos++;
                                                                                          } else {
                                                                                            s2 = peg$FAILED;
                                                                                            if (peg$silentFails === 0) { peg$fail(peg$c120); }
                                                                                          }
                                                                                          if (s2 !== peg$FAILED) {
                                                                                            while (s2 !== peg$FAILED) {
                                                                                              s1.push(s2);
                                                                                              if (input.charCodeAt(peg$currPos) === 72) {
                                                                                                s2 = peg$c119;
                                                                                                peg$currPos++;
                                                                                              } else {
                                                                                                s2 = peg$FAILED;
                                                                                                if (peg$silentFails === 0) { peg$fail(peg$c120); }
                                                                                              }
                                                                                            }
                                                                                          } else {
                                                                                            s1 = peg$c0;
                                                                                          }
                                                                                          if (s1 === peg$FAILED) {
                                                                                            s1 = [];
                                                                                            if (input.charCodeAt(peg$currPos) === 73) {
                                                                                              s2 = peg$c121;
                                                                                              peg$currPos++;
                                                                                            } else {
                                                                                              s2 = peg$FAILED;
                                                                                              if (peg$silentFails === 0) { peg$fail(peg$c122); }
                                                                                            }
                                                                                            if (s2 !== peg$FAILED) {
                                                                                              while (s2 !== peg$FAILED) {
                                                                                                s1.push(s2);
                                                                                                if (input.charCodeAt(peg$currPos) === 73) {
                                                                                                  s2 = peg$c121;
                                                                                                  peg$currPos++;
                                                                                                } else {
                                                                                                  s2 = peg$FAILED;
                                                                                                  if (peg$silentFails === 0) { peg$fail(peg$c122); }
                                                                                                }
                                                                                              }
                                                                                            } else {
                                                                                              s1 = peg$c0;
                                                                                            }
                                                                                            if (s1 === peg$FAILED) {
                                                                                              s1 = [];
                                                                                              if (input.charCodeAt(peg$currPos) === 74) {
                                                                                                s2 = peg$c123;
                                                                                                peg$currPos++;
                                                                                              } else {
                                                                                                s2 = peg$FAILED;
                                                                                                if (peg$silentFails === 0) { peg$fail(peg$c124); }
                                                                                              }
                                                                                              if (s2 !== peg$FAILED) {
                                                                                                while (s2 !== peg$FAILED) {
                                                                                                  s1.push(s2);
                                                                                                  if (input.charCodeAt(peg$currPos) === 74) {
                                                                                                    s2 = peg$c123;
                                                                                                    peg$currPos++;
                                                                                                  } else {
                                                                                                    s2 = peg$FAILED;
                                                                                                    if (peg$silentFails === 0) { peg$fail(peg$c124); }
                                                                                                  }
                                                                                                }
                                                                                              } else {
                                                                                                s1 = peg$c0;
                                                                                              }
                                                                                              if (s1 === peg$FAILED) {
                                                                                                s1 = [];
                                                                                                if (input.charCodeAt(peg$currPos) === 75) {
                                                                                                  s2 = peg$c125;
                                                                                                  peg$currPos++;
                                                                                                } else {
                                                                                                  s2 = peg$FAILED;
                                                                                                  if (peg$silentFails === 0) { peg$fail(peg$c126); }
                                                                                                }
                                                                                                if (s2 !== peg$FAILED) {
                                                                                                  while (s2 !== peg$FAILED) {
                                                                                                    s1.push(s2);
                                                                                                    if (input.charCodeAt(peg$currPos) === 75) {
                                                                                                      s2 = peg$c125;
                                                                                                      peg$currPos++;
                                                                                                    } else {
                                                                                                      s2 = peg$FAILED;
                                                                                                      if (peg$silentFails === 0) { peg$fail(peg$c126); }
                                                                                                    }
                                                                                                  }
                                                                                                } else {
                                                                                                  s1 = peg$c0;
                                                                                                }
                                                                                                if (s1 === peg$FAILED) {
                                                                                                  s1 = [];
                                                                                                  if (input.charCodeAt(peg$currPos) === 76) {
                                                                                                    s2 = peg$c127;
                                                                                                    peg$currPos++;
                                                                                                  } else {
                                                                                                    s2 = peg$FAILED;
                                                                                                    if (peg$silentFails === 0) { peg$fail(peg$c128); }
                                                                                                  }
                                                                                                  if (s2 !== peg$FAILED) {
                                                                                                    while (s2 !== peg$FAILED) {
                                                                                                      s1.push(s2);
                                                                                                      if (input.charCodeAt(peg$currPos) === 76) {
                                                                                                        s2 = peg$c127;
                                                                                                        peg$currPos++;
                                                                                                      } else {
                                                                                                        s2 = peg$FAILED;
                                                                                                        if (peg$silentFails === 0) { peg$fail(peg$c128); }
                                                                                                      }
                                                                                                    }
                                                                                                  } else {
                                                                                                    s1 = peg$c0;
                                                                                                  }
                                                                                                  if (s1 === peg$FAILED) {
                                                                                                    s1 = [];
                                                                                                    if (input.charCodeAt(peg$currPos) === 77) {
                                                                                                      s2 = peg$c129;
                                                                                                      peg$currPos++;
                                                                                                    } else {
                                                                                                      s2 = peg$FAILED;
                                                                                                      if (peg$silentFails === 0) { peg$fail(peg$c130); }
                                                                                                    }
                                                                                                    if (s2 !== peg$FAILED) {
                                                                                                      while (s2 !== peg$FAILED) {
                                                                                                        s1.push(s2);
                                                                                                        if (input.charCodeAt(peg$currPos) === 77) {
                                                                                                          s2 = peg$c129;
                                                                                                          peg$currPos++;
                                                                                                        } else {
                                                                                                          s2 = peg$FAILED;
                                                                                                          if (peg$silentFails === 0) { peg$fail(peg$c130); }
                                                                                                        }
                                                                                                      }
                                                                                                    } else {
                                                                                                      s1 = peg$c0;
                                                                                                    }
                                                                                                    if (s1 === peg$FAILED) {
                                                                                                      s1 = [];
                                                                                                      if (input.charCodeAt(peg$currPos) === 78) {
                                                                                                        s2 = peg$c131;
                                                                                                        peg$currPos++;
                                                                                                      } else {
                                                                                                        s2 = peg$FAILED;
                                                                                                        if (peg$silentFails === 0) { peg$fail(peg$c132); }
                                                                                                      }
                                                                                                      if (s2 !== peg$FAILED) {
                                                                                                        while (s2 !== peg$FAILED) {
                                                                                                          s1.push(s2);
                                                                                                          if (input.charCodeAt(peg$currPos) === 78) {
                                                                                                            s2 = peg$c131;
                                                                                                            peg$currPos++;
                                                                                                          } else {
                                                                                                            s2 = peg$FAILED;
                                                                                                            if (peg$silentFails === 0) { peg$fail(peg$c132); }
                                                                                                          }
                                                                                                        }
                                                                                                      } else {
                                                                                                        s1 = peg$c0;
                                                                                                      }
                                                                                                      if (s1 === peg$FAILED) {
                                                                                                        s1 = [];
                                                                                                        if (input.charCodeAt(peg$currPos) === 79) {
                                                                                                          s2 = peg$c133;
                                                                                                          peg$currPos++;
                                                                                                        } else {
                                                                                                          s2 = peg$FAILED;
                                                                                                          if (peg$silentFails === 0) { peg$fail(peg$c134); }
                                                                                                        }
                                                                                                        if (s2 !== peg$FAILED) {
                                                                                                          while (s2 !== peg$FAILED) {
                                                                                                            s1.push(s2);
                                                                                                            if (input.charCodeAt(peg$currPos) === 79) {
                                                                                                              s2 = peg$c133;
                                                                                                              peg$currPos++;
                                                                                                            } else {
                                                                                                              s2 = peg$FAILED;
                                                                                                              if (peg$silentFails === 0) { peg$fail(peg$c134); }
                                                                                                            }
                                                                                                          }
                                                                                                        } else {
                                                                                                          s1 = peg$c0;
                                                                                                        }
                                                                                                        if (s1 === peg$FAILED) {
                                                                                                          s1 = [];
                                                                                                          if (input.charCodeAt(peg$currPos) === 80) {
                                                                                                            s2 = peg$c135;
                                                                                                            peg$currPos++;
                                                                                                          } else {
                                                                                                            s2 = peg$FAILED;
                                                                                                            if (peg$silentFails === 0) { peg$fail(peg$c136); }
                                                                                                          }
                                                                                                          if (s2 !== peg$FAILED) {
                                                                                                            while (s2 !== peg$FAILED) {
                                                                                                              s1.push(s2);
                                                                                                              if (input.charCodeAt(peg$currPos) === 80) {
                                                                                                                s2 = peg$c135;
                                                                                                                peg$currPos++;
                                                                                                              } else {
                                                                                                                s2 = peg$FAILED;
                                                                                                                if (peg$silentFails === 0) { peg$fail(peg$c136); }
                                                                                                              }
                                                                                                            }
                                                                                                          } else {
                                                                                                            s1 = peg$c0;
                                                                                                          }
                                                                                                          if (s1 === peg$FAILED) {
                                                                                                            s1 = [];
                                                                                                            if (input.charCodeAt(peg$currPos) === 81) {
                                                                                                              s2 = peg$c137;
                                                                                                              peg$currPos++;
                                                                                                            } else {
                                                                                                              s2 = peg$FAILED;
                                                                                                              if (peg$silentFails === 0) { peg$fail(peg$c138); }
                                                                                                            }
                                                                                                            if (s2 !== peg$FAILED) {
                                                                                                              while (s2 !== peg$FAILED) {
                                                                                                                s1.push(s2);
                                                                                                                if (input.charCodeAt(peg$currPos) === 81) {
                                                                                                                  s2 = peg$c137;
                                                                                                                  peg$currPos++;
                                                                                                                } else {
                                                                                                                  s2 = peg$FAILED;
                                                                                                                  if (peg$silentFails === 0) { peg$fail(peg$c138); }
                                                                                                                }
                                                                                                              }
                                                                                                            } else {
                                                                                                              s1 = peg$c0;
                                                                                                            }
                                                                                                            if (s1 === peg$FAILED) {
                                                                                                              s1 = [];
                                                                                                              if (input.charCodeAt(peg$currPos) === 82) {
                                                                                                                s2 = peg$c139;
                                                                                                                peg$currPos++;
                                                                                                              } else {
                                                                                                                s2 = peg$FAILED;
                                                                                                                if (peg$silentFails === 0) { peg$fail(peg$c140); }
                                                                                                              }
                                                                                                              if (s2 !== peg$FAILED) {
                                                                                                                while (s2 !== peg$FAILED) {
                                                                                                                  s1.push(s2);
                                                                                                                  if (input.charCodeAt(peg$currPos) === 82) {
                                                                                                                    s2 = peg$c139;
                                                                                                                    peg$currPos++;
                                                                                                                  } else {
                                                                                                                    s2 = peg$FAILED;
                                                                                                                    if (peg$silentFails === 0) { peg$fail(peg$c140); }
                                                                                                                  }
                                                                                                                }
                                                                                                              } else {
                                                                                                                s1 = peg$c0;
                                                                                                              }
                                                                                                              if (s1 === peg$FAILED) {
                                                                                                                s1 = [];
                                                                                                                if (input.charCodeAt(peg$currPos) === 83) {
                                                                                                                  s2 = peg$c141;
                                                                                                                  peg$currPos++;
                                                                                                                } else {
                                                                                                                  s2 = peg$FAILED;
                                                                                                                  if (peg$silentFails === 0) { peg$fail(peg$c142); }
                                                                                                                }
                                                                                                                if (s2 !== peg$FAILED) {
                                                                                                                  while (s2 !== peg$FAILED) {
                                                                                                                    s1.push(s2);
                                                                                                                    if (input.charCodeAt(peg$currPos) === 83) {
                                                                                                                      s2 = peg$c141;
                                                                                                                      peg$currPos++;
                                                                                                                    } else {
                                                                                                                      s2 = peg$FAILED;
                                                                                                                      if (peg$silentFails === 0) { peg$fail(peg$c142); }
                                                                                                                    }
                                                                                                                  }
                                                                                                                } else {
                                                                                                                  s1 = peg$c0;
                                                                                                                }
                                                                                                                if (s1 === peg$FAILED) {
                                                                                                                  s1 = [];
                                                                                                                  if (input.charCodeAt(peg$currPos) === 84) {
                                                                                                                    s2 = peg$c143;
                                                                                                                    peg$currPos++;
                                                                                                                  } else {
                                                                                                                    s2 = peg$FAILED;
                                                                                                                    if (peg$silentFails === 0) { peg$fail(peg$c144); }
                                                                                                                  }
                                                                                                                  if (s2 !== peg$FAILED) {
                                                                                                                    while (s2 !== peg$FAILED) {
                                                                                                                      s1.push(s2);
                                                                                                                      if (input.charCodeAt(peg$currPos) === 84) {
                                                                                                                        s2 = peg$c143;
                                                                                                                        peg$currPos++;
                                                                                                                      } else {
                                                                                                                        s2 = peg$FAILED;
                                                                                                                        if (peg$silentFails === 0) { peg$fail(peg$c144); }
                                                                                                                      }
                                                                                                                    }
                                                                                                                  } else {
                                                                                                                    s1 = peg$c0;
                                                                                                                  }
                                                                                                                  if (s1 === peg$FAILED) {
                                                                                                                    s1 = [];
                                                                                                                    if (input.charCodeAt(peg$currPos) === 85) {
                                                                                                                      s2 = peg$c145;
                                                                                                                      peg$currPos++;
                                                                                                                    } else {
                                                                                                                      s2 = peg$FAILED;
                                                                                                                      if (peg$silentFails === 0) { peg$fail(peg$c146); }
                                                                                                                    }
                                                                                                                    if (s2 !== peg$FAILED) {
                                                                                                                      while (s2 !== peg$FAILED) {
                                                                                                                        s1.push(s2);
                                                                                                                        if (input.charCodeAt(peg$currPos) === 85) {
                                                                                                                          s2 = peg$c145;
                                                                                                                          peg$currPos++;
                                                                                                                        } else {
                                                                                                                          s2 = peg$FAILED;
                                                                                                                          if (peg$silentFails === 0) { peg$fail(peg$c146); }
                                                                                                                        }
                                                                                                                      }
                                                                                                                    } else {
                                                                                                                      s1 = peg$c0;
                                                                                                                    }
                                                                                                                    if (s1 === peg$FAILED) {
                                                                                                                      s1 = [];
                                                                                                                      if (input.charCodeAt(peg$currPos) === 86) {
                                                                                                                        s2 = peg$c147;
                                                                                                                        peg$currPos++;
                                                                                                                      } else {
                                                                                                                        s2 = peg$FAILED;
                                                                                                                        if (peg$silentFails === 0) { peg$fail(peg$c148); }
                                                                                                                      }
                                                                                                                      if (s2 !== peg$FAILED) {
                                                                                                                        while (s2 !== peg$FAILED) {
                                                                                                                          s1.push(s2);
                                                                                                                          if (input.charCodeAt(peg$currPos) === 86) {
                                                                                                                            s2 = peg$c147;
                                                                                                                            peg$currPos++;
                                                                                                                          } else {
                                                                                                                            s2 = peg$FAILED;
                                                                                                                            if (peg$silentFails === 0) { peg$fail(peg$c148); }
                                                                                                                          }
                                                                                                                        }
                                                                                                                      } else {
                                                                                                                        s1 = peg$c0;
                                                                                                                      }
                                                                                                                      if (s1 === peg$FAILED) {
                                                                                                                        s1 = [];
                                                                                                                        if (input.charCodeAt(peg$currPos) === 87) {
                                                                                                                          s2 = peg$c149;
                                                                                                                          peg$currPos++;
                                                                                                                        } else {
                                                                                                                          s2 = peg$FAILED;
                                                                                                                          if (peg$silentFails === 0) { peg$fail(peg$c150); }
                                                                                                                        }
                                                                                                                        if (s2 !== peg$FAILED) {
                                                                                                                          while (s2 !== peg$FAILED) {
                                                                                                                            s1.push(s2);
                                                                                                                            if (input.charCodeAt(peg$currPos) === 87) {
                                                                                                                              s2 = peg$c149;
                                                                                                                              peg$currPos++;
                                                                                                                            } else {
                                                                                                                              s2 = peg$FAILED;
                                                                                                                              if (peg$silentFails === 0) { peg$fail(peg$c150); }
                                                                                                                            }
                                                                                                                          }
                                                                                                                        } else {
                                                                                                                          s1 = peg$c0;
                                                                                                                        }
                                                                                                                        if (s1 === peg$FAILED) {
                                                                                                                          s1 = [];
                                                                                                                          if (input.charCodeAt(peg$currPos) === 88) {
                                                                                                                            s2 = peg$c151;
                                                                                                                            peg$currPos++;
                                                                                                                          } else {
                                                                                                                            s2 = peg$FAILED;
                                                                                                                            if (peg$silentFails === 0) { peg$fail(peg$c152); }
                                                                                                                          }
                                                                                                                          if (s2 !== peg$FAILED) {
                                                                                                                            while (s2 !== peg$FAILED) {
                                                                                                                              s1.push(s2);
                                                                                                                              if (input.charCodeAt(peg$currPos) === 88) {
                                                                                                                                s2 = peg$c151;
                                                                                                                                peg$currPos++;
                                                                                                                              } else {
                                                                                                                                s2 = peg$FAILED;
                                                                                                                                if (peg$silentFails === 0) { peg$fail(peg$c152); }
                                                                                                                              }
                                                                                                                            }
                                                                                                                          } else {
                                                                                                                            s1 = peg$c0;
                                                                                                                          }
                                                                                                                          if (s1 === peg$FAILED) {
                                                                                                                            s1 = [];
                                                                                                                            if (input.charCodeAt(peg$currPos) === 89) {
                                                                                                                              s2 = peg$c153;
                                                                                                                              peg$currPos++;
                                                                                                                            } else {
                                                                                                                              s2 = peg$FAILED;
                                                                                                                              if (peg$silentFails === 0) { peg$fail(peg$c154); }
                                                                                                                            }
                                                                                                                            if (s2 !== peg$FAILED) {
                                                                                                                              while (s2 !== peg$FAILED) {
                                                                                                                                s1.push(s2);
                                                                                                                                if (input.charCodeAt(peg$currPos) === 89) {
                                                                                                                                  s2 = peg$c153;
                                                                                                                                  peg$currPos++;
                                                                                                                                } else {
                                                                                                                                  s2 = peg$FAILED;
                                                                                                                                  if (peg$silentFails === 0) { peg$fail(peg$c154); }
                                                                                                                                }
                                                                                                                              }
                                                                                                                            } else {
                                                                                                                              s1 = peg$c0;
                                                                                                                            }
                                                                                                                            if (s1 === peg$FAILED) {
                                                                                                                              s1 = [];
                                                                                                                              if (input.charCodeAt(peg$currPos) === 90) {
                                                                                                                                s2 = peg$c155;
                                                                                                                                peg$currPos++;
                                                                                                                              } else {
                                                                                                                                s2 = peg$FAILED;
                                                                                                                                if (peg$silentFails === 0) { peg$fail(peg$c156); }
                                                                                                                              }
                                                                                                                              if (s2 !== peg$FAILED) {
                                                                                                                                while (s2 !== peg$FAILED) {
                                                                                                                                  s1.push(s2);
                                                                                                                                  if (input.charCodeAt(peg$currPos) === 90) {
                                                                                                                                    s2 = peg$c155;
                                                                                                                                    peg$currPos++;
                                                                                                                                  } else {
                                                                                                                                    s2 = peg$FAILED;
                                                                                                                                    if (peg$silentFails === 0) { peg$fail(peg$c156); }
                                                                                                                                  }
                                                                                                                                }
                                                                                                                              } else {
                                                                                                                                s1 = peg$c0;
                                                                                                                              }
                                                                                                                            }
                                                                                                                          }
                                                                                                                        }
                                                                                                                      }
                                                                                                                    }
                                                                                                                  }
                                                                                                                }
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c157(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 46) {
          s1 = peg$c158;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c159); }
        }
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c160();
        }
        s0 = s1;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c32); }
      }

      return s0;
    }

    function peg$parseRowColDimension() {
      var s0, s1;

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c162) {
        s1 = peg$c162;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c163); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c164();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 4) === peg$c165) {
          s1 = peg$c165;
          peg$currPos += 4;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c166); }
        }
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c167();
        }
        s0 = s1;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c161); }
      }

      return s0;
    }

    function peg$parseLine() {
      var s0, s1, s2, s3, s4;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseConnection();
      if (s1 === peg$FAILED) {
        s1 = peg$c169;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseLineChunk();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parseLineChunk();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parseLineChunk();
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c170(s1, s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c168); }
      }

      return s0;
    }

    function peg$parseLineChunk() {
      var s0, s1, s2, s3, s4, s5;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parse__();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseVirtualNameChars();
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseVirtualNameChars();
          }
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parse__();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseConnection();
            if (s4 === peg$FAILED) {
              s4 = peg$c169;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parse__();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c172(s2, s4);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c171); }
      }

      return s0;
    }

    function peg$parseConnection() {
      var s0, s1, s2, s3, s4;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 45) {
        s2 = peg$c174;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c175); }
      }
      if (s2 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 126) {
          s2 = peg$c176;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c177); }
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        if (peg$c178.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c179); }
        }
        if (s4 !== peg$FAILED) {
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            if (peg$c178.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c179); }
            }
          }
        } else {
          s3 = peg$c0;
        }
        if (s3 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 45) {
            s3 = peg$c174;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c175); }
          }
        }
        if (s3 === peg$FAILED) {
          s3 = peg$c169;
        }
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 45) {
            s4 = peg$c174;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c175); }
          }
          if (s4 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 126) {
              s4 = peg$c176;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c177); }
            }
          }
          if (s4 === peg$FAILED) {
            s4 = peg$c169;
          }
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$c0;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c180(s1);
      }
      s0 = s1;
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c173); }
      }

      return s0;
    }

    function peg$parseConnectionTypes() {
      var s0, s1, s2, s3;

      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 45) {
        s0 = peg$c174;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c175); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 126) {
          s0 = peg$c176;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c177); }
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 45) {
            s1 = peg$c174;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c175); }
          }
          if (s1 !== peg$FAILED) {
            s2 = [];
            if (peg$c178.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c179); }
            }
            if (s3 !== peg$FAILED) {
              while (s3 !== peg$FAILED) {
                s2.push(s3);
                if (peg$c178.test(input.charAt(peg$currPos))) {
                  s3 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c179); }
                }
              }
            } else {
              s2 = peg$c0;
            }
            if (s2 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 45) {
                s3 = peg$c174;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c175); }
              }
              if (s3 !== peg$FAILED) {
                s1 = [s1, s2, s3];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 126) {
              s1 = peg$c176;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c177); }
            }
            if (s1 !== peg$FAILED) {
              s2 = [];
              if (peg$c178.test(input.charAt(peg$currPos))) {
                s3 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c179); }
              }
              if (s3 !== peg$FAILED) {
                while (s3 !== peg$FAILED) {
                  s2.push(s3);
                  if (peg$c178.test(input.charAt(peg$currPos))) {
                    s3 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c179); }
                  }
                }
              } else {
                s2 = peg$c0;
              }
              if (s2 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 45) {
                  s2 = peg$c174;
                  peg$currPos++;
                } else {
                  s2 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c175); }
                }
              }
              if (s2 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 126) {
                  s3 = peg$c176;
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c177); }
                }
                if (s3 !== peg$FAILED) {
                  s1 = [s1, s2, s3];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          }
        }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c181); }
      }

      return s0;
    }

    function peg$parseVirtualNameChars() {
      var s0;

      if (peg$c182.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c183); }
      }

      return s0;
    }

    function peg$parseNameChars() {
      var s0;

      if (peg$c184.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c185); }
      }

      return s0;
    }

    function peg$parseNameCharsWithSpace() {
      var s0;

      s0 = peg$parseNameChars();
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 32) {
          s0 = peg$c186;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c187); }
        }
      }

      return s0;
    }

    function peg$parseLiteral() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseNumber();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c188(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseNumber() {
      var s0;

      s0 = peg$parseReal();
      if (s0 === peg$FAILED) {
        s0 = peg$parseInteger();
      }

      return s0;
    }

    function peg$parseInteger() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      if (peg$c178.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c179); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c178.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c179); }
          }
        }
      } else {
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c189(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseReal() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseInteger();
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 46) {
          s3 = peg$c158;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c159); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseInteger();
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$c0;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c190(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseSignedInteger() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (peg$c191.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c192); }
      }
      if (s1 === peg$FAILED) {
        s1 = peg$c169;
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c178.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c179); }
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            if (peg$c178.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c179); }
            }
          }
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseSourceCharacter() {
      var s0;

      if (input.length > peg$currPos) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c193); }
      }

      return s0;
    }

    function peg$parseWhiteSpace() {
      var s0, s1;

      peg$silentFails++;
      if (peg$c195.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c196); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c194); }
      }

      return s0;
    }

    function peg$parseLineTerminator() {
      var s0;

      if (peg$c197.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c198); }
      }

      return s0;
    }

    function peg$parseLineTerminatorSequence() {
      var s0, s1;

      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 10) {
        s0 = peg$c200;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c201); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c202) {
          s0 = peg$c202;
          peg$currPos += 2;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c203); }
        }
        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 13) {
            s0 = peg$c204;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c205); }
          }
          if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 8232) {
              s0 = peg$c206;
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c207); }
            }
            if (s0 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 8233) {
                s0 = peg$c208;
                peg$currPos++;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c209); }
              }
            }
          }
        }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c199); }
      }

      return s0;
    }

    function peg$parseAnyChar() {
      var s0;

      if (peg$c210.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c211); }
      }

      return s0;
    }

    function peg$parseEOS() {
      var s0, s1, s2;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parse__();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 59) {
          s2 = peg$c213;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c214); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parse_();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseLineTerminatorSequence();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parse__();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseEOF();
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c212); }
      }

      return s0;
    }

    function peg$parseEOF() {
      var s0, s1;

      s0 = peg$currPos;
      peg$silentFails++;
      if (input.length > peg$currPos) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c193); }
      }
      peg$silentFails--;
      if (s1 === peg$FAILED) {
        s0 = peg$c215;
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseComment() {
      var s0, s1;

      peg$silentFails++;
      s0 = peg$parseMultiLineComment();
      if (s0 === peg$FAILED) {
        s0 = peg$parseSingleLineComment();
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c216); }
      }

      return s0;
    }

    function peg$parseMultiLineComment() {
      var s0, s1, s2, s3, s4, s5;

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c218) {
        s1 = peg$c218;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c219); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;
        if (input.substr(peg$currPos, 2) === peg$c220) {
          s5 = peg$c220;
          peg$currPos += 2;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c221); }
        }
        peg$silentFails--;
        if (s5 === peg$FAILED) {
          s4 = peg$c215;
        } else {
          peg$currPos = s4;
          s4 = peg$c0;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parseSourceCharacter();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$currPos;
          peg$silentFails++;
          if (input.substr(peg$currPos, 2) === peg$c220) {
            s5 = peg$c220;
            peg$currPos += 2;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c221); }
          }
          peg$silentFails--;
          if (s5 === peg$FAILED) {
            s4 = peg$c215;
          } else {
            peg$currPos = s4;
            s4 = peg$c0;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseSourceCharacter();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c220) {
            s3 = peg$c220;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c221); }
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c217); }
      }

      return s0;
    }

    function peg$parseMultiLineCommentNoLineTerminator() {
      var s0, s1, s2, s3, s4, s5;

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c218) {
        s1 = peg$c218;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c219); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;
        if (input.substr(peg$currPos, 2) === peg$c220) {
          s5 = peg$c220;
          peg$currPos += 2;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c221); }
        }
        if (s5 === peg$FAILED) {
          s5 = peg$parseLineTerminator();
        }
        peg$silentFails--;
        if (s5 === peg$FAILED) {
          s4 = peg$c215;
        } else {
          peg$currPos = s4;
          s4 = peg$c0;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parseSourceCharacter();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$currPos;
          peg$silentFails++;
          if (input.substr(peg$currPos, 2) === peg$c220) {
            s5 = peg$c220;
            peg$currPos += 2;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c221); }
          }
          if (s5 === peg$FAILED) {
            s5 = peg$parseLineTerminator();
          }
          peg$silentFails--;
          if (s5 === peg$FAILED) {
            s4 = peg$c215;
          } else {
            peg$currPos = s4;
            s4 = peg$c0;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseSourceCharacter();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c220) {
            s3 = peg$c220;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c221); }
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c222); }
      }

      return s0;
    }

    function peg$parseSingleLineComment() {
      var s0, s1, s2, s3, s4, s5;

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c224) {
        s1 = peg$c224;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c225); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;
        s5 = peg$parseLineTerminator();
        peg$silentFails--;
        if (s5 === peg$FAILED) {
          s4 = peg$c215;
        } else {
          peg$currPos = s4;
          s4 = peg$c0;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parseSourceCharacter();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$currPos;
          peg$silentFails++;
          s5 = peg$parseLineTerminator();
          peg$silentFails--;
          if (s5 === peg$FAILED) {
            s4 = peg$c215;
          } else {
            peg$currPos = s4;
            s4 = peg$c0;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseSourceCharacter();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseLineTerminator();
          if (s3 === peg$FAILED) {
            s3 = peg$parseEOF();
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c223); }
      }

      return s0;
    }

    function peg$parse_() {
      var s0, s1;

      peg$silentFails++;
      s0 = [];
      s1 = peg$parseWhiteSpace();
      if (s1 === peg$FAILED) {
        s1 = peg$parseMultiLineCommentNoLineTerminator();
        if (s1 === peg$FAILED) {
          s1 = peg$parseSingleLineComment();
        }
      }
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$parseWhiteSpace();
        if (s1 === peg$FAILED) {
          s1 = peg$parseMultiLineCommentNoLineTerminator();
          if (s1 === peg$FAILED) {
            s1 = peg$parseSingleLineComment();
          }
        }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c226); }
      }

      return s0;
    }

    function peg$parse__() {
      var s0, s1;

      peg$silentFails++;
      s0 = [];
      s1 = peg$parseWhiteSpace();
      if (s1 === peg$FAILED) {
        s1 = peg$parseLineTerminatorSequence();
        if (s1 === peg$FAILED) {
          s1 = peg$parseComment();
        }
      }
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$parseWhiteSpace();
        if (s1 === peg$FAILED) {
          s1 = peg$parseLineTerminatorSequence();
          if (s1 === peg$FAILED) {
            s1 = peg$parseComment();
          }
        }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c227); }
      }

      return s0;
    }


      var p, parser, vfls, virtuals, ccss, asts, blankCount; 

      p = parser = this;
      
      blankCount = 0;
      
      p.getBlankName = function () {
        blankCount++;
        return "blank-" + blankCount;
      };
      
      p.size = ['width','height'];
      p.pos = ['x','y'];

      p.getResults = function () {
        var _ccss = virtuals.sort().join(" ");
        if (_ccss.length == 0) {
          _ccss = ccss;
        }
        else {
          _ccss = ["@virtual "+_ccss].concat(ccss);
        }
        return {
            //asts: asts, // DEBUG
            ccss: _ccss,
            vfl: vfls
          }
      }

      asts = [];
      
      p.addAST = function (stuff) {
        asts.push(stuff);
      }

      ccss = [];
      
      p.addCCSS = function (statement) {
        ccss.push(statement)
      }

      virtuals = [];
      
      p.addVirtual = function (virtual) {
        if (virtuals.indexOf(virtual) === -1) {
          virtuals.push('"'+virtual+'"');
        }
      }

      vfls = [];

      p.addVFL = function (vfl) {
        vfls.push(vfl);
      }


      p.addTemplate = function (lines,name,options) {
        var ast, prefix, container;
        
        prefix = name+'-';
        ast = p.processHLines(lines);
        ast.name = name;
        
        if (options.in) {
          container = options.in;
        }
        else {
          container = "::";
        }

        var md, mdOp, outergap, gaps, g, hasGap;
        
        gaps = {};
        hasGap = false;
        
        g = options.gap;
        if (g) { 
          hasGap = true;
          gaps.top = g;
          gaps.right = g;
          gaps.bottom = g;
          gaps.left = g;
          gaps.h = g;
          gaps.v = g;
        }    
        g = options['h-gap'];
        if (g) { 
          hasGap = true;
          gaps.right = g;
          gaps.left = g;
          gaps.h = g;
        }
        g = options['v-gap'];
        if (g) { 
          hasGap = true;
          gaps.top = g;
          gaps.bottom = g;
          gaps.v = g;
        }
        g = options['outer-gap'];
        if (g) { 
          hasGap = true;
          gaps.top = g;
          gaps.right = g;
          gaps.bottom = g;
          gaps.left = g;
        }
        g = options['top-gap'];
        if (g) { 
          hasGap = true;
          gaps.top = g;
        }
        g = options['right-gap']; 
        if (g) { 
          hasGap = true;
          gaps.right = g;
        }
        g = options['bottom-gap']; 
        if (g) { 
          hasGap = true;
          gaps.bottom = g;
        }
        g = options['left-gap']; 
        if (g) { 
          hasGap = true;
          gaps.left = g;
        }
        
        
        if (hasGap) {
          mdOp = "<=";
        } else {
          mdOp = "==";
        }
        
        
        // md-width     
        // -------------------------------------------------
        // == (this[width] - gap.left - gap.right - gap * (span - 1)) / span
        
        md = '::['+name+'-md-width] ' + mdOp + ' ';
        if (gaps.right || gaps.left || gaps.h) {
          md += '(' + container + '[width]';
          if (gaps.right) {md += ' - ' + gaps.right;}
          if (gaps.left ) {md += ' - ' + gaps.left;}      
          if (gaps.h && ast.yspan > 1){
            md += ' - ' + gaps.h;
            if (ast.yspan > 2) {md += ' * ' + (ast.yspan - 1);}
          }
          md += ')';
        } else {
          md += container + '[width]';
        }
        if (ast.yspan > 1){md += ' / ' + ast.yspan;}
        md += " !require";
        p.addCCSS(md);
        
        
        // md-height
        // -------------------------------------------------
      
        md = '::['+name+'-md-height] ' + mdOp + ' ';
        if (gaps.top || gaps.bottom || gaps.v) {
          md += '(' + container + '[height]';
          if (gaps.top) {md += ' - ' + gaps.top;}
          if (gaps.bottom ) {md += ' - ' + gaps.bottom;}
          if (gaps.v && ast.xspan > 1){
            md += ' - ' + gaps.v;
            if (ast.xspan > 2) {md += ' * ' + (ast.xspan - 1);}
          }
          md += ')';
        } else {
          md += container + '[height]';
        }    
        if (ast.xspan > 1){md += ' / ' + ast.xspan;}
        md += " !require";
        p.addCCSS(md);
        
        
        // virtual widths
        // -------------------------------------------------
        // == md-width * span - gap * (span - 1)
        
        var xspan, wccss;
        for (var el in ast.widths) {
          p.addVirtual(prefix+el);
          xspan = ast.widths[el];
          wccss = '"'+prefix+el+'"[width] == ';
          wccss +='::['+ast.name+'-md-width]';
          if (xspan > 1) {
            wccss += ' * ' + xspan;
            if (gaps.h) {
              wccss += ' + ' + gaps.h;
              if (xspan > 2) {
                wccss += ' * ' + (xspan - 1);
              }
            }
          }
          p.addCCSS(wccss)
        }
        
        
        // virtual heights
        // -------------------------------------------------
        
        var yspan, hccss;
        for (var el in ast.heights) {
          yspan = ast.heights[el];
          hccss = '"'+prefix+el+'"[height] == ';
          hccss +='::['+ast.name+'-md-height]';
          if (yspan > 1) {
            hccss += ' * ' + yspan;
            if (gaps.v) {
              hccss += ' + ' + gaps.v;
              if (yspan > 2) {
                hccss += ' * ' + (yspan - 1);
              }
            }
          }
          p.addCCSS(hccss);
        }

        var vfl, vflFooter;
        ast.v.forEach(function(brij){
          brij = brij.split("%-v-%");
          vfl = '@v ["'+prefix+brij[0]+'"]';
          if (gaps.v) {vfl += '-';}
          vfl += '["'+prefix+brij[1]+'"]';
          if (gaps.v) {vfl += ' gap('+gaps.v+')';}
          p.addVFL(vfl);
        });
       
        ast.h.forEach(function(brij){
          brij = brij.split("%-h-%");
          vfl = '@h ["'+prefix+brij[0]+'"]';
          if (gaps.h) {vfl += '-';}
          vfl += '["'+prefix+brij[1]+'"]';
          if (gaps.h) {vfl += ' gap('+gaps.h+')';}
          p.addVFL(vfl);
        });
        
        var edgeEls;
        
        edgeEls = [];
        ast.cols[0].y.forEach(function(el){
          if (edgeEls.indexOf(el) > -1) {return null;}
          edgeEls.push(el);
          vfl = '@h |';
          if (gaps.left) {vfl += '-';}
          vfl += '["'+prefix+el+'"]'+' in('+container+')';   
          if (gaps.left) {vfl += ' gap('+gaps.left+')';}
          p.addVFL(vfl);
        });

        edgeEls = [];
        ast.rows[0].x.forEach(function(el){
          if (edgeEls.indexOf(el) > -1) {return null;}
          edgeEls.push(el);
          vfl = '@v |';
          if (gaps.top) {vfl += '-';}
          vfl += '["'+prefix+el+'"]'+' in('+container+')';
          if (gaps.top) {vfl += ' gap('+gaps.top+')';}
          p.addVFL(vfl);
        });

        edgeEls = [];
        ast.cols[ast.cols.length-1].y.forEach(function(el){
          if (edgeEls.indexOf(el) > -1) {return null;}
          edgeEls.push(el);
          vfl = '@h ["'+prefix+el+'"]';
          if (gaps.right) {vfl += '-';}
          vfl +='|'+' in('+container+')';
          if (gaps.right) {vfl += ' gap('+gaps.right+')';}
          p.addVFL(vfl);
        });

        edgeEls = [];
        ast.rows[ast.rows.length-1].x.forEach(function(el){
          if (edgeEls.indexOf(el) > -1) {return null;}
          edgeEls.push(el);
          vfl = '@v ["'+prefix+el+'"]';
          if (gaps.bottom) {vfl += '-';}
          vfl += '|'+' in('+container+')';
          if (gaps.bottom) {vfl += ' gap('+gaps.bottom+')';}
          p.addVFL(vfl);
        });

        

        //p.addVFL(ast);
        p.addAST(ast);
        
        return ast;
      }

      p.processHZones = function (zones) {
        var xspan, curr, prev, h, x, widths,
          dotCounter, isDot;
        xspan = 0;
        h = [];
        widths = {};
        x = [];
        dotCounter = 0;    
        zones.forEach(function(zone){
          isDot = false;
          curr = zone.name;
          
          // "." are each treated as an empty zone
          if (curr === "-DOT-") {
            isDot = false;
            dotCounter++;
            curr += dotCounter;
          }
          x = x.concat(zone.x);
          delete zone.x;
          if (prev && prev !== curr) {   
            h.push([prev,curr].join("%-h-%"));
          }
          widths[zone.name] = zone.xspan;
          xspan += zone.xspan;
          prev = curr;
        });
        return {xspan:xspan,x:x,h:h,widths:widths};
      }
      
      p.processHLines = function (lines) {
        var cols,i,j,col,results;
        results = {heights:{},widths:{},v:[],h:[]};
        cols = [];
        i = 0;


        lines.forEach(function(row){
          j = 0;
          for (var nam in row.widths) {        
            results.widths[nam] = row.widths[nam];
          }
          row.h.forEach(function(hh){
            if (results.h.indexOf(hh) === -1) {results.h.push(hh);}
          })
          row.x.forEach(function(xx){
            var col;
            if (!cols[j]) {cols[j] = {y:[]};}
            col = cols[j];
            col.y.push(xx);
            j++;
          })
          i++;
        });    

        cols.forEach(function(col){
          var curr, currspan, prev, vStr, heights, i, v;
          v = [];            
          currspan = 0;
          prev = null;
          i = 0;
          col.y.forEach(function(name){        
            curr = name;
            currspan++;
            if (col.y[i+1]!==curr) {
              results.heights[name] = currspan;
              currspan = 0;
            }
            if (prev && prev !== curr) {
              vStr = [prev,curr].join("%-v-%")
              if (results.v.indexOf(vStr) === -1) {results.v.push(vStr);}
            }
            prev = curr;
            i++;
          })
        })

        results.yspan = cols.length;
        results.xspan = lines.length;
        results.cols = cols;
        results.rows = lines;           

        return results;
      }  


      p.error = function (m,l,c) {
        if (!!l && !!c) {
          m = m + " {line:" + l + ", col:" + c + "}";
        }
        console.error(m);
        return m;
      };

      p.trim = function (x) {
        if (typeof x === "string") {return x.trim();}
        if (x instanceof Array) {return x.join("").trim();}
        return ""
      };

      p.flatten = function (array, isShallow) {
        var index = -1,
          length = array ? array.length : 0,
          result = [];

        while (++index < length) {
          var value = array[index];

          if (value instanceof Array) {
            Array.prototype.push.apply(result, isShallow ? value : p.flatten(value));
          }
          else {
            result.push(value);
          }
        }
        return result;
      }

      p.stringify = function (array) {
        return p.trim(p.flatten(array));
      };
      


    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);
    }
  }

  return {
    SyntaxError: SyntaxError,
    parse:       parse
  };
})();